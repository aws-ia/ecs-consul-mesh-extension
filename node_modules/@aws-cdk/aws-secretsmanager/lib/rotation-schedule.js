"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HostedRotationType = exports.HostedRotation = exports.RotationSchedule = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const ec2 = require("@aws-cdk/aws-ec2");
const iam = require("@aws-cdk/aws-iam");
const kms = require("@aws-cdk/aws-kms");
const core_1 = require("@aws-cdk/core");
const secretsmanager_generated_1 = require("./secretsmanager.generated");
/**
 * A rotation schedule.
 *
 * @stability stable
 */
class RotationSchedule extends core_1.Resource {
    /**
     * @stability stable
     */
    constructor(scope, id, props) {
        var _d, _e, _f;
        super(scope, id);
        if ((!props.rotationLambda && !props.hostedRotation) || (props.rotationLambda && props.hostedRotation)) {
            throw new Error('One of `rotationLambda` or `hostedRotation` must be specified.');
        }
        if ((_d = props.rotationLambda) === null || _d === void 0 ? void 0 : _d.permissionsNode.defaultChild) {
            if (props.secret.encryptionKey) {
                props.secret.encryptionKey.grantEncryptDecrypt(new kms.ViaServicePrincipal(`secretsmanager.${core_1.Stack.of(this).region}.amazonaws.com`, props.rotationLambda.grantPrincipal));
            }
            props.rotationLambda.grantInvoke(new iam.ServicePrincipal('secretsmanager.amazonaws.com'));
            props.rotationLambda.addToRolePolicy(new iam.PolicyStatement({
                actions: [
                    'secretsmanager:DescribeSecret',
                    'secretsmanager:GetSecretValue',
                    'secretsmanager:PutSecretValue',
                    'secretsmanager:UpdateSecretVersionStage',
                ],
                resources: [props.secret.secretArn],
            }));
            props.rotationLambda.addToRolePolicy(new iam.PolicyStatement({
                actions: [
                    'secretsmanager:GetRandomPassword',
                ],
                resources: ['*'],
            }));
        }
        new secretsmanager_generated_1.CfnRotationSchedule(this, 'Resource', {
            secretId: props.secret.secretArn,
            rotationLambdaArn: (_e = props.rotationLambda) === null || _e === void 0 ? void 0 : _e.functionArn,
            hostedRotationLambda: (_f = props.hostedRotation) === null || _f === void 0 ? void 0 : _f.bind(props.secret, this),
            rotationRules: {
                automaticallyAfterDays: props.automaticallyAfter && props.automaticallyAfter.toDays() || 30,
            },
        });
        // Prevent secrets deletions when rotation is in place
        props.secret.denyAccountRootDelete();
    }
}
exports.RotationSchedule = RotationSchedule;
_a = JSII_RTTI_SYMBOL_1;
RotationSchedule[_a] = { fqn: "@aws-cdk/aws-secretsmanager.RotationSchedule", version: "1.119.0" };
/**
 * A hosted rotation.
 *
 * @stability stable
 */
class HostedRotation {
    constructor(type, props, masterSecret) {
        this.type = type;
        this.props = props;
        this.masterSecret = masterSecret;
        if (type.isMultiUser && !masterSecret) {
            throw new Error('The `masterSecret` must be specified when using the multi user scheme.');
        }
    }
    /**
     * MySQL Single User.
     *
     * @stability stable
     */
    static mysqlSingleUser(options = {}) {
        return new HostedRotation(HostedRotationType.MYSQL_SINGLE_USER, options);
    }
    /**
     * MySQL Multi User.
     *
     * @stability stable
     */
    static mysqlMultiUser(options) {
        return new HostedRotation(HostedRotationType.MYSQL_MULTI_USER, options, options.masterSecret);
    }
    /**
     * PostgreSQL Single User.
     *
     * @stability stable
     */
    static postgreSqlSingleUser(options = {}) {
        return new HostedRotation(HostedRotationType.POSTGRESQL_SINGLE_USER, options);
    }
    /**
     * PostgreSQL Multi User.
     *
     * @stability stable
     */
    static postgreSqlMultiUser(options) {
        return new HostedRotation(HostedRotationType.POSTGRESQL_MULTI_USER, options, options.masterSecret);
    }
    /**
     * Oracle Single User.
     *
     * @stability stable
     */
    static oracleSingleUser(options = {}) {
        return new HostedRotation(HostedRotationType.ORACLE_SINGLE_USER, options);
    }
    /**
     * Oracle Multi User.
     *
     * @stability stable
     */
    static oracleMultiUser(options) {
        return new HostedRotation(HostedRotationType.ORACLE_MULTI_USER, options, options.masterSecret);
    }
    /**
     * MariaDB Single User.
     *
     * @stability stable
     */
    static mariaDbSingleUser(options = {}) {
        return new HostedRotation(HostedRotationType.MARIADB_SINGLE_USER, options);
    }
    /**
     * MariaDB Multi User.
     *
     * @stability stable
     */
    static mariaDbMultiUser(options) {
        return new HostedRotation(HostedRotationType.MARIADB_MULTI_USER, options, options.masterSecret);
    }
    /**
     * SQL Server Single User.
     *
     * @stability stable
     */
    static sqlServerSingleUser(options = {}) {
        return new HostedRotation(HostedRotationType.SQLSERVER_SINGLE_USER, options);
    }
    /**
     * SQL Server Multi User.
     *
     * @stability stable
     */
    static sqlServerMultiUser(options) {
        return new HostedRotation(HostedRotationType.SQLSERVER_MULTI_USER, options, options.masterSecret);
    }
    /**
     * Redshift Single User.
     *
     * @stability stable
     */
    static redshiftSingleUser(options = {}) {
        return new HostedRotation(HostedRotationType.REDSHIFT_SINGLE_USER, options);
    }
    /**
     * Redshift Multi User.
     *
     * @stability stable
     */
    static redshiftMultiUser(options) {
        return new HostedRotation(HostedRotationType.REDSHIFT_MULTI_USER, options, options.masterSecret);
    }
    /**
     * MongoDB Single User.
     *
     * @stability stable
     */
    static mongoDbSingleUser(options = {}) {
        return new HostedRotation(HostedRotationType.MONGODB_SINGLE_USER, options);
    }
    /**
     * MongoDB Multi User.
     *
     * @stability stable
     */
    static mongoDbMultiUser(options) {
        return new HostedRotation(HostedRotationType.MONGODB_MULTI_USER, options, options.masterSecret);
    }
    /**
     * Binds this hosted rotation to a secret.
     *
     * @stability stable
     */
    bind(secret, scope) {
        var _d, _e, _f, _g, _h, _j, _k;
        // https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-secretsmanager-rotationschedule-hostedrotationlambda.html
        core_1.Stack.of(scope).addTransform('AWS::SecretsManager-2020-07-23');
        if (!this.props.vpc && this.props.securityGroups) {
            throw new Error('`vpc` must be specified when specifying `securityGroups`.');
        }
        if (this.props.vpc) {
            this._connections = new ec2.Connections({
                securityGroups: this.props.securityGroups || [new ec2.SecurityGroup(scope, 'SecurityGroup', {
                        vpc: this.props.vpc,
                    })],
            });
        }
        // Prevent master secret deletion when rotation is in place
        if (this.masterSecret) {
            this.masterSecret.denyAccountRootDelete();
        }
        return {
            rotationType: this.type.name,
            kmsKeyArn: (_d = secret.encryptionKey) === null || _d === void 0 ? void 0 : _d.keyArn,
            masterSecretArn: (_e = this.masterSecret) === null || _e === void 0 ? void 0 : _e.secretArn,
            masterSecretKmsKeyArn: (_g = (_f = this.masterSecret) === null || _f === void 0 ? void 0 : _f.encryptionKey) === null || _g === void 0 ? void 0 : _g.keyArn,
            rotationLambdaName: this.props.functionName,
            vpcSecurityGroupIds: (_j = (_h = this._connections) === null || _h === void 0 ? void 0 : _h.securityGroups) === null || _j === void 0 ? void 0 : _j.map(s => s.securityGroupId).join(','),
            vpcSubnetIds: (_k = this.props.vpc) === null || _k === void 0 ? void 0 : _k.selectSubnets(this.props.vpcSubnets).subnetIds.join(','),
        };
    }
    /**
     * Security group connections for this hosted rotation.
     *
     * @stability stable
     */
    get connections() {
        if (!this.props.vpc) {
            throw new Error('Cannot use connections for a hosted rotation that is not deployed in a VPC');
        }
        // If we are in a vpc and bind() has been called _connections should be defined
        if (!this._connections) {
            throw new Error('Cannot use connections for a hosted rotation that has not been bound to a secret');
        }
        return this._connections;
    }
}
exports.HostedRotation = HostedRotation;
_b = JSII_RTTI_SYMBOL_1;
HostedRotation[_b] = { fqn: "@aws-cdk/aws-secretsmanager.HostedRotation", version: "1.119.0" };
/**
 * Hosted rotation type.
 *
 * @stability stable
 */
class HostedRotationType {
    /**
     * @param name The type of rotation
     * @param isMultiUser Whether the rotation uses the mutli user scheme
     */
    constructor(name, isMultiUser) {
        this.name = name;
        this.isMultiUser = isMultiUser;
    }
}
exports.HostedRotationType = HostedRotationType;
_c = JSII_RTTI_SYMBOL_1;
HostedRotationType[_c] = { fqn: "@aws-cdk/aws-secretsmanager.HostedRotationType", version: "1.119.0" };
/**
 * MySQL Single User.
 *
 * @stability stable
 */
HostedRotationType.MYSQL_SINGLE_USER = new HostedRotationType('MySQLSingleUser');
/**
 * MySQL Multi User.
 *
 * @stability stable
 */
HostedRotationType.MYSQL_MULTI_USER = new HostedRotationType('MySQLMultiUser', true);
/**
 * PostgreSQL Single User.
 *
 * @stability stable
 */
HostedRotationType.POSTGRESQL_SINGLE_USER = new HostedRotationType('PostgreSQLSingleUser');
/**
 * PostgreSQL Multi User.
 *
 * @stability stable
 */
HostedRotationType.POSTGRESQL_MULTI_USER = new HostedRotationType('PostgreSQLMultiUser', true);
/**
 * Oracle Single User.
 *
 * @stability stable
 */
HostedRotationType.ORACLE_SINGLE_USER = new HostedRotationType('OracleSingleUser');
/**
 * Oracle Multi User.
 *
 * @stability stable
 */
HostedRotationType.ORACLE_MULTI_USER = new HostedRotationType('OracleMultiUser', true);
/**
 * MariaDB Single User.
 *
 * @stability stable
 */
HostedRotationType.MARIADB_SINGLE_USER = new HostedRotationType('MariaDBSingleUser');
/**
 * MariaDB Multi User.
 *
 * @stability stable
 */
HostedRotationType.MARIADB_MULTI_USER = new HostedRotationType('MariaDBMultiUser', true);
/**
 * SQL Server Single User.
 *
 * @stability stable
 */
HostedRotationType.SQLSERVER_SINGLE_USER = new HostedRotationType('SQLServerSingleUser');
/**
 * SQL Server Multi User.
 *
 * @stability stable
 */
HostedRotationType.SQLSERVER_MULTI_USER = new HostedRotationType('SQLServerMultiUser', true);
/**
 * Redshift Single User.
 *
 * @stability stable
 */
HostedRotationType.REDSHIFT_SINGLE_USER = new HostedRotationType('RedshiftSingleUser');
/**
 * Redshift Multi User.
 *
 * @stability stable
 */
HostedRotationType.REDSHIFT_MULTI_USER = new HostedRotationType('RedshiftMultiUser', true);
/**
 * MongoDB Single User.
 *
 * @stability stable
 */
HostedRotationType.MONGODB_SINGLE_USER = new HostedRotationType('MongoDBSingleUser');
/**
 * MongoDB Multi User.
 *
 * @stability stable
 */
HostedRotationType.MONGODB_MULTI_USER = new HostedRotationType('MongoDBMultiUser', true);
//# sourceMappingURL=data:application/json;base64,