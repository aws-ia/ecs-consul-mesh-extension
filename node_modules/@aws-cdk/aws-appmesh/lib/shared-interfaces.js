"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Backend = exports.AccessLog = exports.Protocol = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const utils_1 = require("./private/utils");
/**
 * (deprecated) Enum of supported AppMesh protocols.
 *
 * @deprecated not for use outside package
 */
var Protocol;
(function (Protocol) {
    Protocol["HTTP"] = "http";
    Protocol["TCP"] = "tcp";
    Protocol["HTTP2"] = "http2";
    Protocol["GRPC"] = "grpc";
})(Protocol = exports.Protocol || (exports.Protocol = {}));
/**
 * Configuration for Envoy Access logs for mesh endpoints.
 *
 * @stability stable
 */
class AccessLog {
    /**
     * Path to a file to write access logs to.
     *
     * @default - no file based access logging
     * @stability stable
     */
    static fromFilePath(filePath) {
        return new FileAccessLog(filePath);
    }
}
exports.AccessLog = AccessLog;
_a = JSII_RTTI_SYMBOL_1;
AccessLog[_a] = { fqn: "@aws-cdk/aws-appmesh.AccessLog", version: "1.119.0" };
/**
 * Configuration for Envoy Access logs for mesh endpoints
 */
class FileAccessLog extends AccessLog {
    constructor(filePath) {
        super();
        this.filePath = filePath;
    }
    bind(_scope) {
        return {
            virtualNodeAccessLog: {
                file: {
                    path: this.filePath,
                },
            },
            virtualGatewayAccessLog: {
                file: {
                    path: this.filePath,
                },
            },
        };
    }
}
/**
 * Contains static factory methods to create backends.
 *
 * @stability stable
 */
class Backend {
    /**
     * Construct a Virtual Service backend.
     *
     * @stability stable
     */
    static virtualService(virtualService, props = {}) {
        return new VirtualServiceBackend(virtualService, props.tlsClientPolicy);
    }
}
exports.Backend = Backend;
_b = JSII_RTTI_SYMBOL_1;
Backend[_b] = { fqn: "@aws-cdk/aws-appmesh.Backend", version: "1.119.0" };
/**
 * Represents the properties needed to define a Virtual Service backend
 */
class VirtualServiceBackend extends Backend {
    constructor(virtualService, tlsClientPolicy) {
        super();
        this.virtualService = virtualService;
        this.tlsClientPolicy = tlsClientPolicy;
    }
    /**
     * Return config for a Virtual Service backend
     */
    bind(scope) {
        return {
            virtualServiceBackend: {
                virtualService: {
                    virtualServiceName: this.virtualService.virtualServiceName,
                    clientPolicy: this.tlsClientPolicy
                        ? {
                            tls: utils_1.renderTlsClientPolicy(scope, this.tlsClientPolicy),
                        }
                        : undefined,
                },
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,