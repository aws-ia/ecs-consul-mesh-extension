"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubjectAlternativeNames = exports.MutualTlsValidationTrust = exports.TlsValidationTrust = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Defines the TLS Validation Context Trust.
 *
 * @stability stable
 */
class TlsValidationTrust {
    /**
     * Tells envoy where to fetch the validation context from.
     *
     * @stability stable
     */
    static file(certificateChain) {
        return new TlsValidationFileTrust(certificateChain);
    }
    /**
     * TLS Validation Context Trust for ACM Private Certificate Authority (CA).
     *
     * @stability stable
     */
    static acm(certificateAuthorities) {
        return new TlsValidationAcmTrust(certificateAuthorities);
    }
    /**
     * TLS Validation Context Trust for Envoy' service discovery service.
     *
     * @stability stable
     */
    static sds(secretName) {
        return new TlsValidationSdsTrust(secretName);
    }
}
exports.TlsValidationTrust = TlsValidationTrust;
_a = JSII_RTTI_SYMBOL_1;
TlsValidationTrust[_a] = { fqn: "@aws-cdk/aws-appmesh.TlsValidationTrust", version: "1.119.0" };
/**
 * Represents a TLS Validation Context Trust that is supported for mutual TLS authentication.
 *
 * @stability stable
 */
class MutualTlsValidationTrust extends TlsValidationTrust {
    constructor() {
        super(...arguments);
        // TypeScript uses structural typing, so we need a property different from TlsValidationTrust
        /**
         * @stability stable
         */
        this.differentiator = false;
    }
}
exports.MutualTlsValidationTrust = MutualTlsValidationTrust;
_b = JSII_RTTI_SYMBOL_1;
MutualTlsValidationTrust[_b] = { fqn: "@aws-cdk/aws-appmesh.MutualTlsValidationTrust", version: "1.119.0" };
class TlsValidationAcmTrust extends TlsValidationTrust {
    constructor(certificateAuthorities) {
        super();
        this.certificateAuthorities = certificateAuthorities;
    }
    bind(_scope) {
        if (this.certificateAuthorities.length === 0) {
            throw new Error('you must provide at least one Certificate Authority when creating an ACM Trust ClientPolicy');
        }
        else {
            return {
                tlsValidationTrust: {
                    acm: {
                        certificateAuthorityArns: this.certificateAuthorities.map(certificateArn => certificateArn.certificateAuthorityArn),
                    },
                },
            };
        }
    }
}
class TlsValidationFileTrust extends MutualTlsValidationTrust {
    constructor(certificateChain) {
        super();
        this.certificateChain = certificateChain;
    }
    bind(_scope) {
        return {
            tlsValidationTrust: {
                file: {
                    certificateChain: this.certificateChain,
                },
            },
        };
    }
}
class TlsValidationSdsTrust extends MutualTlsValidationTrust {
    constructor(secretName) {
        super();
        this.secretName = secretName;
    }
    bind(_scope) {
        return {
            tlsValidationTrust: {
                sds: {
                    secretName: this.secretName,
                },
            },
        };
    }
}
/**
 * Used to generate Subject Alternative Names Matchers.
 *
 * @stability stable
 */
class SubjectAlternativeNames {
    /**
     * The values of the SAN must match the specified values exactly.
     *
     * @param names The exact values to test against.
     * @stability stable
     */
    static matchingExactly(...names) {
        return new SubjectAlternativeNamesImpl({ exact: names });
    }
}
exports.SubjectAlternativeNames = SubjectAlternativeNames;
_c = JSII_RTTI_SYMBOL_1;
SubjectAlternativeNames[_c] = { fqn: "@aws-cdk/aws-appmesh.SubjectAlternativeNames", version: "1.119.0" };
class SubjectAlternativeNamesImpl extends SubjectAlternativeNames {
    constructor(matchProperty) {
        super();
        this.matchProperty = matchProperty;
    }
    bind(_scope) {
        return {
            subjectAlternativeNamesMatch: this.matchProperty,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,