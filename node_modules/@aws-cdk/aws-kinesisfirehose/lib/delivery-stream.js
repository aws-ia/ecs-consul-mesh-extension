"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeliveryStream = exports.StreamEncryption = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cloudwatch = require("@aws-cdk/aws-cloudwatch");
const ec2 = require("@aws-cdk/aws-ec2");
const iam = require("@aws-cdk/aws-iam");
const kms = require("@aws-cdk/aws-kms");
const cdk = require("@aws-cdk/core");
const region_info_1 = require("@aws-cdk/region-info");
const constructs_1 = require("constructs");
const kinesisfirehose_canned_metrics_generated_1 = require("./kinesisfirehose-canned-metrics.generated");
const kinesisfirehose_generated_1 = require("./kinesisfirehose.generated");
const PUT_RECORD_ACTIONS = [
    'firehose:PutRecord',
    'firehose:PutRecordBatch',
];
/**
 * Base class for new and imported Kinesis Data Firehose delivery streams.
 */
class DeliveryStreamBase extends cdk.Resource {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        this.connections = setConnections(this);
    }
    /**
     * (experimental) Grant the `grantee` identity permissions to perform `actions`.
     *
     * @experimental
     */
    grant(grantee, ...actions) {
        return iam.Grant.addToPrincipal({
            resourceArns: [this.deliveryStreamArn],
            grantee: grantee,
            actions: actions,
        });
    }
    /**
     * (experimental) Grant the `grantee` identity permissions to perform `firehose:PutRecord` and `firehose:PutRecordBatch` actions on this delivery stream.
     *
     * @experimental
     */
    grantPutRecords(grantee) {
        return this.grant(grantee, ...PUT_RECORD_ACTIONS);
    }
    /**
     * (experimental) Return the given named metric for this delivery stream.
     *
     * @experimental
     */
    metric(metricName, props) {
        return new cloudwatch.Metric({
            namespace: 'AWS/Firehose',
            metricName: metricName,
            dimensions: {
                DeliveryStreamName: this.deliveryStreamName,
            },
            ...props,
        }).attachTo(this);
    }
    /**
     * (experimental) Metric for the number of bytes ingested successfully into the delivery stream over the specified time period after throttling.
     *
     * By default, this metric will be calculated as an average over a period of 5 minutes.
     *
     * @experimental
     */
    metricIncomingBytes(props) {
        return this.cannedMetric(kinesisfirehose_canned_metrics_generated_1.FirehoseMetrics.incomingBytesAverage, props);
    }
    /**
     * (experimental) Metric for the number of records ingested successfully into the delivery stream over the specified time period after throttling.
     *
     * By default, this metric will be calculated as an average over a period of 5 minutes.
     *
     * @experimental
     */
    metricIncomingRecords(props) {
        return this.cannedMetric(kinesisfirehose_canned_metrics_generated_1.FirehoseMetrics.incomingRecordsAverage, props);
    }
    /**
     * (experimental) Metric for the number of bytes delivered to Amazon S3 for backup over the specified time period.
     *
     * By default, this metric will be calculated as an average over a period of 5 minutes.
     *
     * @experimental
     */
    metricBackupToS3Bytes(props) {
        return this.cannedMetric(kinesisfirehose_canned_metrics_generated_1.FirehoseMetrics.backupToS3BytesAverage, props);
    }
    /**
     * (experimental) Metric for the age (from getting into Kinesis Data Firehose to now) of the oldest record in Kinesis Data Firehose.
     *
     * Any record older than this age has been delivered to the Amazon S3 bucket for backup.
     *
     * By default, this metric will be calculated as an average over a period of 5 minutes.
     *
     * @experimental
     */
    metricBackupToS3DataFreshness(props) {
        return this.cannedMetric(kinesisfirehose_canned_metrics_generated_1.FirehoseMetrics.backupToS3DataFreshnessAverage, props);
    }
    /**
     * (experimental) Metric for the number of records delivered to Amazon S3 for backup over the specified time period.
     *
     * By default, this metric will be calculated as an average over a period of 5 minutes.
     *
     * @experimental
     */
    metricBackupToS3Records(props) {
        return this.cannedMetric(kinesisfirehose_canned_metrics_generated_1.FirehoseMetrics.backupToS3RecordsAverage, props);
    }
    cannedMetric(fn, props) {
        return new cloudwatch.Metric({
            ...fn({ DeliveryStreamName: this.deliveryStreamName }),
            ...props,
        }).attachTo(this);
    }
}
/**
 * (experimental) Options for server-side encryption of a delivery stream.
 *
 * @experimental
 */
var StreamEncryption;
(function (StreamEncryption) {
    StreamEncryption[StreamEncryption["UNENCRYPTED"] = 0] = "UNENCRYPTED";
    StreamEncryption[StreamEncryption["CUSTOMER_MANAGED"] = 1] = "CUSTOMER_MANAGED";
    StreamEncryption[StreamEncryption["AWS_OWNED"] = 2] = "AWS_OWNED";
})(StreamEncryption = exports.StreamEncryption || (exports.StreamEncryption = {}));
/**
 * (experimental) Create a Kinesis Data Firehose delivery stream.
 *
 * @experimental
 * @resource AWS::KinesisFirehose::DeliveryStream
 */
class DeliveryStream extends DeliveryStreamBase {
    /**
     * @experimental
     */
    constructor(scope, id, props) {
        var _b, _c, _d, _e;
        super(scope, id, {
            physicalName: props.deliveryStreamName,
        });
        if (props.destinations.length !== 1) {
            throw new Error(`Only one destination is allowed per delivery stream, given ${props.destinations.length}`);
        }
        const role = (_b = props.role) !== null && _b !== void 0 ? _b : new iam.Role(this, 'Service Role', {
            assumedBy: new iam.ServicePrincipal('firehose.amazonaws.com'),
        });
        this.grantPrincipal = role;
        if (props.sourceStream &&
            (props.encryption === StreamEncryption.AWS_OWNED || props.encryption === StreamEncryption.CUSTOMER_MANAGED || props.encryptionKey)) {
            throw new Error('Requested server-side encryption but delivery stream source is a Kinesis data stream. Specify server-side encryption on the data stream instead.');
        }
        if ((props.encryption === StreamEncryption.AWS_OWNED || props.encryption === StreamEncryption.UNENCRYPTED) && props.encryptionKey) {
            throw new Error(`Specified stream encryption as ${StreamEncryption[props.encryption]} but provided a customer-managed key`);
        }
        const encryptionKey = (_c = props.encryptionKey) !== null && _c !== void 0 ? _c : (props.encryption === StreamEncryption.CUSTOMER_MANAGED ? new kms.Key(this, 'Key') : undefined);
        const encryptionConfig = (encryptionKey || (props.encryption === StreamEncryption.AWS_OWNED)) ? {
            keyArn: encryptionKey === null || encryptionKey === void 0 ? void 0 : encryptionKey.keyArn,
            keyType: encryptionKey ? 'CUSTOMER_MANAGED_CMK' : 'AWS_OWNED_CMK',
        } : undefined;
        /*
         * In order for the service role to have access to the encryption key before the delivery stream is created, the
         * CfnDeliveryStream below should have a dependency on the grant returned by the function call below:
         * > `keyGrant?.applyBefore(resource)`
         * However, an error during synthesis is thrown if this is added:
         * > ${Token[PolicyDocument.###]} does not implement DependableTrait
         * Data will not be lost if the permissions are not granted to the service role immediately; Firehose has a 24 hour
         * period where data will be buffered and retried if access is denied to the encryption key. For that reason, it is
         * acceptable to omit the dependency for now. See: https://github.com/aws/aws-cdk/issues/15790
         */
        encryptionKey === null || encryptionKey === void 0 ? void 0 : encryptionKey.grantEncryptDecrypt(role);
        const sourceStreamConfig = props.sourceStream ? {
            kinesisStreamArn: props.sourceStream.streamArn,
            roleArn: role.roleArn,
        } : undefined;
        const readStreamGrant = (_d = props.sourceStream) === null || _d === void 0 ? void 0 : _d.grantRead(role);
        /*
         * Firehose still uses the deprecated DescribeStream API instead of the modern DescribeStreamSummary API.
         * kinesis.IStream.grantRead does not provide DescribeStream permissions so we add it manually here.
         */
        if (readStreamGrant && readStreamGrant.principalStatement) {
            readStreamGrant.principalStatement.addActions('kinesis:DescribeStream');
        }
        const destinationConfig = props.destinations[0].bind(this, {});
        const resource = new kinesisfirehose_generated_1.CfnDeliveryStream(this, 'Resource', {
            deliveryStreamEncryptionConfigurationInput: encryptionConfig,
            deliveryStreamName: props.deliveryStreamName,
            deliveryStreamType: props.sourceStream ? 'KinesisStreamAsSource' : 'DirectPut',
            kinesisStreamSourceConfiguration: sourceStreamConfig,
            ...destinationConfig,
        });
        (_e = destinationConfig.dependables) === null || _e === void 0 ? void 0 : _e.forEach(dependable => resource.node.addDependency(dependable));
        if (readStreamGrant) {
            resource.node.addDependency(readStreamGrant);
        }
        this.deliveryStreamArn = this.getResourceArnAttribute(resource.attrArn, {
            service: 'kinesis',
            resource: 'deliverystream',
            resourceName: this.physicalName,
        });
        this.deliveryStreamName = this.getResourceNameAttribute(resource.ref);
    }
    /**
     * (experimental) Import an existing delivery stream from its name.
     *
     * @experimental
     */
    static fromDeliveryStreamName(scope, id, deliveryStreamName) {
        return this.fromDeliveryStreamAttributes(scope, id, { deliveryStreamName });
    }
    /**
     * (experimental) Import an existing delivery stream from its ARN.
     *
     * @experimental
     */
    static fromDeliveryStreamArn(scope, id, deliveryStreamArn) {
        return this.fromDeliveryStreamAttributes(scope, id, { deliveryStreamArn });
    }
    /**
     * (experimental) Import an existing delivery stream from its attributes.
     *
     * @experimental
     */
    static fromDeliveryStreamAttributes(scope, id, attrs) {
        var _b, _c;
        if (!attrs.deliveryStreamName && !attrs.deliveryStreamArn) {
            throw new Error('Either deliveryStreamName or deliveryStreamArn must be provided in DeliveryStreamAttributes');
        }
        const deliveryStreamName = (_b = attrs.deliveryStreamName) !== null && _b !== void 0 ? _b : cdk.Stack.of(scope).splitArn(attrs.deliveryStreamArn, cdk.ArnFormat.SLASH_RESOURCE_NAME).resourceName;
        if (!deliveryStreamName) {
            throw new Error(`No delivery stream name found in ARN: '${attrs.deliveryStreamArn}'`);
        }
        const deliveryStreamArn = (_c = attrs.deliveryStreamArn) !== null && _c !== void 0 ? _c : cdk.Stack.of(scope).formatArn({
            service: 'firehose',
            resource: 'deliverystream',
            resourceName: attrs.deliveryStreamName,
            arnFormat: cdk.ArnFormat.SLASH_RESOURCE_NAME,
        });
        class Import extends DeliveryStreamBase {
            constructor() {
                var _b;
                super(...arguments);
                this.deliveryStreamName = deliveryStreamName;
                this.deliveryStreamArn = deliveryStreamArn;
                this.grantPrincipal = (_b = attrs.role) !== null && _b !== void 0 ? _b : new iam.UnknownPrincipal({ resource: this });
            }
        }
        return new Import(scope, id);
    }
}
exports.DeliveryStream = DeliveryStream;
_a = JSII_RTTI_SYMBOL_1;
DeliveryStream[_a] = { fqn: "@aws-cdk/aws-kinesisfirehose.DeliveryStream", version: "1.119.0" };
function setConnections(scope) {
    const stack = cdk.Stack.of(scope);
    const mappingId = '@aws-cdk/aws-kinesisfirehose.CidrBlocks';
    let cfnMapping = constructs_1.Node.of(stack).tryFindChild(mappingId);
    if (!cfnMapping) {
        const mapping = {};
        region_info_1.RegionInfo.regions.forEach((regionInfo) => {
            if (regionInfo.firehoseCidrBlock) {
                mapping[regionInfo.name] = {
                    FirehoseCidrBlock: regionInfo.firehoseCidrBlock,
                };
            }
        });
        cfnMapping = new cdk.CfnMapping(stack, mappingId, {
            mapping,
            lazy: true,
        });
    }
    const cidrBlock = cfnMapping.findInMap(stack.region, 'FirehoseCidrBlock');
    return new ec2.Connections({
        peer: ec2.Peer.ipv4(cidrBlock),
    });
}
//# sourceMappingURL=data:application/json;base64,