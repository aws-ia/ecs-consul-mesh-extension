import * as cloudwatch from '@aws-cdk/aws-cloudwatch';
import * as ec2 from '@aws-cdk/aws-ec2';
import * as iam from '@aws-cdk/aws-iam';
import * as kinesis from '@aws-cdk/aws-kinesis';
import * as kms from '@aws-cdk/aws-kms';
import * as cdk from '@aws-cdk/core';
import { Construct } from 'constructs';
import { IDestination } from './destination';
/**
 * (experimental) Represents a Kinesis Data Firehose delivery stream.
 *
 * @experimental
 */
export interface IDeliveryStream extends cdk.IResource, iam.IGrantable, ec2.IConnectable {
    /**
     * (experimental) The ARN of the delivery stream.
     *
     * @experimental
     * @attribute true
     */
    readonly deliveryStreamArn: string;
    /**
     * (experimental) The name of the delivery stream.
     *
     * @experimental
     * @attribute true
     */
    readonly deliveryStreamName: string;
    /**
     * (experimental) Grant the `grantee` identity permissions to perform `actions`.
     *
     * @experimental
     */
    grant(grantee: iam.IGrantable, ...actions: string[]): iam.Grant;
    /**
     * (experimental) Grant the `grantee` identity permissions to perform `firehose:PutRecord` and `firehose:PutRecordBatch` actions on this delivery stream.
     *
     * @experimental
     */
    grantPutRecords(grantee: iam.IGrantable): iam.Grant;
    /**
     * (experimental) Return the given named metric for this delivery stream.
     *
     * @experimental
     */
    metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    /**
     * (experimental) Metric for the number of bytes ingested successfully into the delivery stream over the specified time period after throttling.
     *
     * By default, this metric will be calculated as an average over a period of 5 minutes.
     *
     * @experimental
     */
    metricIncomingBytes(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    /**
     * (experimental) Metric for the number of records ingested successfully into the delivery stream over the specified time period after throttling.
     *
     * By default, this metric will be calculated as an average over a period of 5 minutes.
     *
     * @experimental
     */
    metricIncomingRecords(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    /**
     * (experimental) Metric for the number of bytes delivered to Amazon S3 for backup over the specified time period.
     *
     * By default, this metric will be calculated as an average over a period of 5 minutes.
     *
     * @experimental
     */
    metricBackupToS3Bytes(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    /**
     * (experimental) Metric for the age (from getting into Kinesis Data Firehose to now) of the oldest record in Kinesis Data Firehose.
     *
     * Any record older than this age has been delivered to the Amazon S3 bucket for backup.
     *
     * By default, this metric will be calculated as an average over a period of 5 minutes.
     *
     * @experimental
     */
    metricBackupToS3DataFreshness(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    /**
     * (experimental) Metric for the number of records delivered to Amazon S3 for backup over the specified time period.
     *
     * By default, this metric will be calculated as an average over a period of 5 minutes.
     *
     * @experimental
     */
    metricBackupToS3Records(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
}
/**
 * Base class for new and imported Kinesis Data Firehose delivery streams.
 */
declare abstract class DeliveryStreamBase extends cdk.Resource implements IDeliveryStream {
    abstract readonly deliveryStreamName: string;
    abstract readonly deliveryStreamArn: string;
    abstract readonly grantPrincipal: iam.IPrincipal;
    /**
     * (experimental) Network connections between Kinesis Data Firehose and other resources, i.e. Redshift cluster.
     *
     * @experimental
     */
    readonly connections: ec2.Connections;
    constructor(scope: Construct, id: string, props?: cdk.ResourceProps);
    /**
     * (experimental) Grant the `grantee` identity permissions to perform `actions`.
     *
     * @experimental
     */
    grant(grantee: iam.IGrantable, ...actions: string[]): iam.Grant;
    /**
     * (experimental) Grant the `grantee` identity permissions to perform `firehose:PutRecord` and `firehose:PutRecordBatch` actions on this delivery stream.
     *
     * @experimental
     */
    grantPutRecords(grantee: iam.IGrantable): iam.Grant;
    /**
     * (experimental) Return the given named metric for this delivery stream.
     *
     * @experimental
     */
    metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    /**
     * (experimental) Metric for the number of bytes ingested successfully into the delivery stream over the specified time period after throttling.
     *
     * By default, this metric will be calculated as an average over a period of 5 minutes.
     *
     * @experimental
     */
    metricIncomingBytes(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    /**
     * (experimental) Metric for the number of records ingested successfully into the delivery stream over the specified time period after throttling.
     *
     * By default, this metric will be calculated as an average over a period of 5 minutes.
     *
     * @experimental
     */
    metricIncomingRecords(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    /**
     * (experimental) Metric for the number of bytes delivered to Amazon S3 for backup over the specified time period.
     *
     * By default, this metric will be calculated as an average over a period of 5 minutes.
     *
     * @experimental
     */
    metricBackupToS3Bytes(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    /**
     * (experimental) Metric for the age (from getting into Kinesis Data Firehose to now) of the oldest record in Kinesis Data Firehose.
     *
     * Any record older than this age has been delivered to the Amazon S3 bucket for backup.
     *
     * By default, this metric will be calculated as an average over a period of 5 minutes.
     *
     * @experimental
     */
    metricBackupToS3DataFreshness(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    /**
     * (experimental) Metric for the number of records delivered to Amazon S3 for backup over the specified time period.
     *
     * By default, this metric will be calculated as an average over a period of 5 minutes.
     *
     * @experimental
     */
    metricBackupToS3Records(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    private cannedMetric;
}
/**
 * (experimental) Options for server-side encryption of a delivery stream.
 *
 * @experimental
 */
export declare enum StreamEncryption {
    /**
     * (experimental) Data in the stream is stored unencrypted.
     *
     * @experimental
     */
    UNENCRYPTED = 0,
    /**
     * (experimental) Data in the stream is stored encrypted by a KMS key managed by the customer.
     *
     * @experimental
     */
    CUSTOMER_MANAGED = 1,
    /**
     * (experimental) Data in the stream is stored encrypted by a KMS key owned by AWS and managed for use in multiple AWS accounts.
     *
     * @experimental
     */
    AWS_OWNED = 2
}
/**
 * (experimental) Properties for a new delivery stream.
 *
 * @experimental
 */
export interface DeliveryStreamProps {
    /**
     * (experimental) The destinations that this delivery stream will deliver data to.
     *
     * Only a singleton array is supported at this time.
     *
     * @experimental
     */
    readonly destinations: IDestination[];
    /**
     * (experimental) A name for the delivery stream.
     *
     * @default - a name is generated by CloudFormation.
     * @experimental
     */
    readonly deliveryStreamName?: string;
    /**
     * (experimental) The Kinesis data stream to use as a source for this delivery stream.
     *
     * @default - data must be written to the delivery stream via a direct put.
     * @experimental
     */
    readonly sourceStream?: kinesis.IStream;
    /**
     * (experimental) The IAM role associated with this delivery stream.
     *
     * Assumed by Kinesis Data Firehose to read from sources and encrypt data server-side.
     *
     * @default - a role will be created with default permissions.
     * @experimental
     */
    readonly role?: iam.IRole;
    /**
     * (experimental) Indicates the type of customer master key (CMK) to use for server-side encryption, if any.
     *
     * @default StreamEncryption.UNENCRYPTED - unless `encryptionKey` is provided, in which case this will be implicitly set to `StreamEncryption.CUSTOMER_MANAGED`
     * @experimental
     */
    readonly encryption?: StreamEncryption;
    /**
     * (experimental) Customer managed key to server-side encrypt data in the stream.
     *
     * @default - no KMS key will be used; if `encryption` is set to `CUSTOMER_MANAGED`, a KMS key will be created for you
     * @experimental
     */
    readonly encryptionKey?: kms.IKey;
}
/**
 * (experimental) A full specification of a delivery stream that can be used to import it fluently into the CDK application.
 *
 * @experimental
 */
export interface DeliveryStreamAttributes {
    /**
     * (experimental) The ARN of the delivery stream.
     *
     * At least one of deliveryStreamArn and deliveryStreamName must be provided.
     *
     * @default - derived from `deliveryStreamName`.
     * @experimental
     */
    readonly deliveryStreamArn?: string;
    /**
     * (experimental) The name of the delivery stream.
     *
     * At least one of deliveryStreamName and deliveryStreamArn  must be provided.
     *
     * @default - derived from `deliveryStreamArn`.
     * @experimental
     */
    readonly deliveryStreamName?: string;
    /**
     * (experimental) The IAM role associated with this delivery stream.
     *
     * Assumed by Kinesis Data Firehose to read from sources and encrypt data server-side.
     *
     * @default - the imported stream cannot be granted access to other resources as an `iam.IGrantable`.
     * @experimental
     */
    readonly role?: iam.IRole;
}
/**
 * (experimental) Create a Kinesis Data Firehose delivery stream.
 *
 * @experimental
 * @resource AWS::KinesisFirehose::DeliveryStream
 */
export declare class DeliveryStream extends DeliveryStreamBase {
    /**
     * (experimental) Import an existing delivery stream from its name.
     *
     * @experimental
     */
    static fromDeliveryStreamName(scope: Construct, id: string, deliveryStreamName: string): IDeliveryStream;
    /**
     * (experimental) Import an existing delivery stream from its ARN.
     *
     * @experimental
     */
    static fromDeliveryStreamArn(scope: Construct, id: string, deliveryStreamArn: string): IDeliveryStream;
    /**
     * (experimental) Import an existing delivery stream from its attributes.
     *
     * @experimental
     */
    static fromDeliveryStreamAttributes(scope: Construct, id: string, attrs: DeliveryStreamAttributes): IDeliveryStream;
    /**
     * (experimental) The name of the delivery stream.
     *
     * @experimental
     */
    readonly deliveryStreamName: string;
    /**
     * (experimental) The ARN of the delivery stream.
     *
     * @experimental
     */
    readonly deliveryStreamArn: string;
    /**
     * (experimental) The principal to grant permissions to.
     *
     * @experimental
     */
    readonly grantPrincipal: iam.IPrincipal;
    /**
     * @experimental
     */
    constructor(scope: Construct, id: string, props: DeliveryStreamProps);
}
export {};
