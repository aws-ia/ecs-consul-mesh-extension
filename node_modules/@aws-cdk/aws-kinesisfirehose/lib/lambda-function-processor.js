"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LambdaFunctionProcessor = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * (experimental) Use an AWS Lambda function to transform records.
 *
 * @experimental
 */
class LambdaFunctionProcessor {
    /**
     * @experimental
     */
    constructor(lambdaFunction, props = {}) {
        this.lambdaFunction = lambdaFunction;
        this.props = props;
    }
    /**
     * (experimental) Binds this processor to a destination of a delivery stream.
     *
     * Implementers should use this method to grant processor invocation permissions to the provided stream and return the
     * necessary configuration to register as a processor.
     *
     * @experimental
     */
    bind(_scope, options) {
        this.lambdaFunction.grantInvoke(options.role);
        return {
            processorType: 'Lambda',
            processorIdentifier: {
                parameterName: 'LambdaArn',
                parameterValue: this.lambdaFunction.functionArn,
            },
        };
    }
}
exports.LambdaFunctionProcessor = LambdaFunctionProcessor;
_a = JSII_RTTI_SYMBOL_1;
LambdaFunctionProcessor[_a] = { fqn: "@aws-cdk/aws-kinesisfirehose.LambdaFunctionProcessor", version: "1.119.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFtYmRhLWZ1bmN0aW9uLXByb2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxhbWJkYS1mdW5jdGlvbi1wcm9jZXNzb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUtBLE1BQWEsdUJBQXVCOzs7O0lBSWxDLFlBQTZCLGNBQWdDLEVBQUUsUUFBNEIsRUFBRTtRQUFoRSxtQkFBYyxHQUFkLGNBQWMsQ0FBa0I7UUFDM0QsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQzs7Ozs7Ozs7O0lBRU0sSUFBSSxDQUFDLE1BQWlCLEVBQUUsT0FBaUM7UUFDOUQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTlDLE9BQU87WUFDTCxhQUFhLEVBQUUsUUFBUTtZQUN2QixtQkFBbUIsRUFBRTtnQkFDbkIsYUFBYSxFQUFFLFdBQVc7Z0JBQzFCLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVc7YUFDaEQ7U0FDRixDQUFDO0lBQ0osQ0FBQzs7QUFsQkgsMERBbUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gJ0Bhd3MtY2RrL2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBEYXRhUHJvY2Vzc29yQmluZE9wdGlvbnMsIERhdGFQcm9jZXNzb3JDb25maWcsIERhdGFQcm9jZXNzb3JQcm9wcywgSURhdGFQcm9jZXNzb3IgfSBmcm9tICcuL3Byb2Nlc3Nvcic7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgY2xhc3MgTGFtYmRhRnVuY3Rpb25Qcm9jZXNzb3IgaW1wbGVtZW50cyBJRGF0YVByb2Nlc3NvciB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyByZWFkb25seSBwcm9wczogRGF0YVByb2Nlc3NvclByb3BzO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgbGFtYmRhRnVuY3Rpb246IGxhbWJkYS5JRnVuY3Rpb24sIHByb3BzOiBEYXRhUHJvY2Vzc29yUHJvcHMgPSB7fSkge1xuICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgfVxuXG4gIHB1YmxpYyBiaW5kKF9zY29wZTogQ29uc3RydWN0LCBvcHRpb25zOiBEYXRhUHJvY2Vzc29yQmluZE9wdGlvbnMpOiBEYXRhUHJvY2Vzc29yQ29uZmlnIHtcbiAgICB0aGlzLmxhbWJkYUZ1bmN0aW9uLmdyYW50SW52b2tlKG9wdGlvbnMucm9sZSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcHJvY2Vzc29yVHlwZTogJ0xhbWJkYScsXG4gICAgICBwcm9jZXNzb3JJZGVudGlmaWVyOiB7XG4gICAgICAgIHBhcmFtZXRlck5hbWU6ICdMYW1iZGFBcm4nLFxuICAgICAgICBwYXJhbWV0ZXJWYWx1ZTogdGhpcy5sYW1iZGFGdW5jdGlvbi5mdW5jdGlvbkFybixcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxufVxuIl19