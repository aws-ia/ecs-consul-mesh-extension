"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpLoadBalancerExtension = void 0;
const alb = require("@aws-cdk/aws-elasticloadbalancingv2");
const cdk = require("@aws-cdk/core");
const extension_interfaces_1 = require("./extension-interfaces");
/**
 * This extension add a public facing load balancer for sending traffic
 * to one or more replicas of the application container.
 */
class HttpLoadBalancerExtension extends extension_interfaces_1.ServiceExtension {
    constructor() {
        super('load-balancer');
    }
    // Before the service is created, go ahead and create the load balancer itself.
    prehook(service, scope) {
        this.parentService = service;
        this.loadBalancer = new alb.ApplicationLoadBalancer(scope, `${this.parentService.id}-load-balancer`, {
            vpc: this.parentService.vpc,
            internetFacing: true,
        });
        this.listener = this.loadBalancer.addListener(`${this.parentService.id}-listener`, {
            port: 80,
            open: true,
        });
        // Automatically create an output
        new cdk.CfnOutput(scope, `${this.parentService.id}-load-balancer-dns-output`, {
            value: this.loadBalancer.loadBalancerDnsName,
        });
    }
    // Minor service configuration tweaks to work better with a load balancer
    modifyServiceProps(props) {
        return {
            ...props,
            // Give the task a little bit of grace time to start passing
            // healthchecks. Without this it is possible for a slow starting task
            // to cause the ALB to consider the task unhealthy, causing ECS to stop
            // the task before it actually has a chance to finish starting up
            healthCheckGracePeriod: cdk.Duration.minutes(1),
        };
    }
    // After the service is created add the service to the load balancer's listener
    useService(service) {
        this.listener.addTargets(this.parentService.id, {
            deregistrationDelay: cdk.Duration.seconds(10),
            port: 80,
            targets: [service],
        });
    }
}
exports.HttpLoadBalancerExtension = HttpLoadBalancerExtension;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1sb2FkLWJhbGFuY2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaHR0cC1sb2FkLWJhbGFuY2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDJEQUEyRDtBQUMzRCxxQ0FBcUM7QUFFckMsaUVBQXdFO0FBTXhFOzs7R0FHRztBQUNILE1BQWEseUJBQTBCLFNBQVEsdUNBQWdCO0lBSTdEO1FBQ0UsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRCwrRUFBK0U7SUFDeEUsT0FBTyxDQUFDLE9BQWdCLEVBQUUsS0FBZ0I7UUFDL0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUM7UUFFN0IsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUU7WUFDbkcsR0FBRyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRztZQUMzQixjQUFjLEVBQUUsSUFBSTtTQUNyQixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLFdBQVcsRUFBRTtZQUNqRixJQUFJLEVBQUUsRUFBRTtZQUNSLElBQUksRUFBRSxJQUFJO1NBQ1gsQ0FBQyxDQUFDO1FBRUgsaUNBQWlDO1FBQ2pDLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsMkJBQTJCLEVBQUU7WUFDNUUsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsbUJBQW1CO1NBQzdDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCx5RUFBeUU7SUFDbEUsa0JBQWtCLENBQUMsS0FBbUI7UUFDM0MsT0FBTztZQUNMLEdBQUcsS0FBSztZQUVSLDREQUE0RDtZQUM1RCxxRUFBcUU7WUFDckUsdUVBQXVFO1lBQ3ZFLGlFQUFpRTtZQUNqRSxzQkFBc0IsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDaEMsQ0FBQztJQUNwQixDQUFDO0lBRUQsK0VBQStFO0lBQ3hFLFVBQVUsQ0FBQyxPQUE0QztRQUM1RCxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRTtZQUM5QyxtQkFBbUIsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDN0MsSUFBSSxFQUFFLEVBQUU7WUFDUixPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUM7U0FDbkIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBakRELDhEQWlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGVjcyBmcm9tICdAYXdzLWNkay9hd3MtZWNzJztcbmltcG9ydCAqIGFzIGFsYiBmcm9tICdAYXdzLWNkay9hd3MtZWxhc3RpY2xvYWRiYWxhbmNpbmd2Mic7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZSc7XG5pbXBvcnQgeyBTZXJ2aWNlRXh0ZW5zaW9uLCBTZXJ2aWNlQnVpbGQgfSBmcm9tICcuL2V4dGVuc2lvbi1pbnRlcmZhY2VzJztcblxuLy8ga2VlcCB0aGlzIGltcG9ydCBzZXBhcmF0ZSBmcm9tIG90aGVyIGltcG9ydHMgdG8gcmVkdWNlIGNoYW5jZSBmb3IgbWVyZ2UgY29uZmxpY3RzIHdpdGggdjItbWFpblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWR1cGxpY2F0ZS1pbXBvcnRzLCBpbXBvcnQvb3JkZXJcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuXG4vKipcbiAqIFRoaXMgZXh0ZW5zaW9uIGFkZCBhIHB1YmxpYyBmYWNpbmcgbG9hZCBiYWxhbmNlciBmb3Igc2VuZGluZyB0cmFmZmljXG4gKiB0byBvbmUgb3IgbW9yZSByZXBsaWNhcyBvZiB0aGUgYXBwbGljYXRpb24gY29udGFpbmVyLlxuICovXG5leHBvcnQgY2xhc3MgSHR0cExvYWRCYWxhbmNlckV4dGVuc2lvbiBleHRlbmRzIFNlcnZpY2VFeHRlbnNpb24ge1xuICBwcml2YXRlIGxvYWRCYWxhbmNlciE6IGFsYi5JQXBwbGljYXRpb25Mb2FkQmFsYW5jZXI7XG4gIHByaXZhdGUgbGlzdGVuZXIhOiBhbGIuSUFwcGxpY2F0aW9uTGlzdGVuZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ2xvYWQtYmFsYW5jZXInKTtcbiAgfVxuXG4gIC8vIEJlZm9yZSB0aGUgc2VydmljZSBpcyBjcmVhdGVkLCBnbyBhaGVhZCBhbmQgY3JlYXRlIHRoZSBsb2FkIGJhbGFuY2VyIGl0c2VsZi5cbiAgcHVibGljIHByZWhvb2soc2VydmljZTogU2VydmljZSwgc2NvcGU6IENvbnN0cnVjdCkge1xuICAgIHRoaXMucGFyZW50U2VydmljZSA9IHNlcnZpY2U7XG5cbiAgICB0aGlzLmxvYWRCYWxhbmNlciA9IG5ldyBhbGIuQXBwbGljYXRpb25Mb2FkQmFsYW5jZXIoc2NvcGUsIGAke3RoaXMucGFyZW50U2VydmljZS5pZH0tbG9hZC1iYWxhbmNlcmAsIHtcbiAgICAgIHZwYzogdGhpcy5wYXJlbnRTZXJ2aWNlLnZwYyxcbiAgICAgIGludGVybmV0RmFjaW5nOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgdGhpcy5saXN0ZW5lciA9IHRoaXMubG9hZEJhbGFuY2VyLmFkZExpc3RlbmVyKGAke3RoaXMucGFyZW50U2VydmljZS5pZH0tbGlzdGVuZXJgLCB7XG4gICAgICBwb3J0OiA4MCxcbiAgICAgIG9wZW46IHRydWUsXG4gICAgfSk7XG5cbiAgICAvLyBBdXRvbWF0aWNhbGx5IGNyZWF0ZSBhbiBvdXRwdXRcbiAgICBuZXcgY2RrLkNmbk91dHB1dChzY29wZSwgYCR7dGhpcy5wYXJlbnRTZXJ2aWNlLmlkfS1sb2FkLWJhbGFuY2VyLWRucy1vdXRwdXRgLCB7XG4gICAgICB2YWx1ZTogdGhpcy5sb2FkQmFsYW5jZXIubG9hZEJhbGFuY2VyRG5zTmFtZSxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIE1pbm9yIHNlcnZpY2UgY29uZmlndXJhdGlvbiB0d2Vha3MgdG8gd29yayBiZXR0ZXIgd2l0aCBhIGxvYWQgYmFsYW5jZXJcbiAgcHVibGljIG1vZGlmeVNlcnZpY2VQcm9wcyhwcm9wczogU2VydmljZUJ1aWxkKTogU2VydmljZUJ1aWxkIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ucHJvcHMsXG5cbiAgICAgIC8vIEdpdmUgdGhlIHRhc2sgYSBsaXR0bGUgYml0IG9mIGdyYWNlIHRpbWUgdG8gc3RhcnQgcGFzc2luZ1xuICAgICAgLy8gaGVhbHRoY2hlY2tzLiBXaXRob3V0IHRoaXMgaXQgaXMgcG9zc2libGUgZm9yIGEgc2xvdyBzdGFydGluZyB0YXNrXG4gICAgICAvLyB0byBjYXVzZSB0aGUgQUxCIHRvIGNvbnNpZGVyIHRoZSB0YXNrIHVuaGVhbHRoeSwgY2F1c2luZyBFQ1MgdG8gc3RvcFxuICAgICAgLy8gdGhlIHRhc2sgYmVmb3JlIGl0IGFjdHVhbGx5IGhhcyBhIGNoYW5jZSB0byBmaW5pc2ggc3RhcnRpbmcgdXBcbiAgICAgIGhlYWx0aENoZWNrR3JhY2VQZXJpb2Q6IGNkay5EdXJhdGlvbi5taW51dGVzKDEpLFxuICAgIH0gYXMgU2VydmljZUJ1aWxkO1xuICB9XG5cbiAgLy8gQWZ0ZXIgdGhlIHNlcnZpY2UgaXMgY3JlYXRlZCBhZGQgdGhlIHNlcnZpY2UgdG8gdGhlIGxvYWQgYmFsYW5jZXIncyBsaXN0ZW5lclxuICBwdWJsaWMgdXNlU2VydmljZShzZXJ2aWNlOiBlY3MuRWMyU2VydmljZSB8IGVjcy5GYXJnYXRlU2VydmljZSkge1xuICAgIHRoaXMubGlzdGVuZXIuYWRkVGFyZ2V0cyh0aGlzLnBhcmVudFNlcnZpY2UuaWQsIHtcbiAgICAgIGRlcmVnaXN0cmF0aW9uRGVsYXk6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDEwKSxcbiAgICAgIHBvcnQ6IDgwLFxuICAgICAgdGFyZ2V0czogW3NlcnZpY2VdLFxuICAgIH0pO1xuICB9XG59XG4iXX0=