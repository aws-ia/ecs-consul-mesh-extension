"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScaleOnCpuUtilization = void 0;
const cdk = require("@aws-cdk/core");
const extension_interfaces_1 = require("./extension-interfaces");
// The default autoscaling settings
const cpuScalingPropsDefault = {
    initialTaskCount: 2,
    minTaskCount: 2,
    maxTaskCount: 8,
    targetCpuUtilization: 50,
    scaleOutCooldown: cdk.Duration.seconds(60),
    scaleInCooldown: cdk.Duration.seconds(60),
};
/**
 * This extension helps you scale your service according to CPU utilization.
 */
class ScaleOnCpuUtilization extends extension_interfaces_1.ServiceExtension {
    constructor(props) {
        super('scale-on-cpu-utilization');
        let combinedProps = {
            ...cpuScalingPropsDefault,
            ...props,
        };
        this.initialTaskCount = combinedProps.initialTaskCount;
        this.minTaskCount = combinedProps.minTaskCount;
        this.maxTaskCount = combinedProps.maxTaskCount;
        this.targetCpuUtilization = combinedProps.targetCpuUtilization;
        this.scaleOutCooldown = combinedProps.scaleOutCooldown;
        this.scaleInCooldown = combinedProps.scaleInCooldown;
    }
    // This service modifies properties of the service prior
    // to construct creation.
    modifyServiceProps(props) {
        return {
            ...props,
            // Launch an initial number of tasks
            // In the future we should change this to use a custom resource
            // to read the current task count set by autoscaling, so that the task
            // count doesn't rollback to the initial level on each deploy.
            desiredCount: this.initialTaskCount,
        };
    }
    // This hook utilizes the resulting service construct
    // once it is created.
    useService(service) {
        const scalingTarget = service.autoScaleTaskCount({
            minCapacity: this.minTaskCount,
            maxCapacity: this.maxTaskCount,
        });
        scalingTarget.scaleOnCpuUtilization(`${this.parentService.id}-target-cpu-utilization-${this.targetCpuUtilization}`, {
            targetUtilizationPercent: this.targetCpuUtilization,
            scaleInCooldown: this.scaleInCooldown,
            scaleOutCooldown: this.scaleOutCooldown,
        });
    }
}
exports.ScaleOnCpuUtilization = ScaleOnCpuUtilization;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NhbGUtb24tY3B1LXV0aWxpemF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2NhbGUtb24tY3B1LXV0aWxpemF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHFDQUFxQztBQUNyQyxpRUFBd0U7QUFpRHhFLG1DQUFtQztBQUNuQyxNQUFNLHNCQUFzQixHQUFHO0lBQzdCLGdCQUFnQixFQUFFLENBQUM7SUFDbkIsWUFBWSxFQUFFLENBQUM7SUFDZixZQUFZLEVBQUUsQ0FBQztJQUNmLG9CQUFvQixFQUFFLEVBQUU7SUFDeEIsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO0lBQzFDLGVBQWUsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7Q0FDMUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBYSxxQkFBc0IsU0FBUSx1Q0FBZ0I7SUErQnpELFlBQVksS0FBdUI7UUFDakMsS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFFbEMsSUFBSSxhQUFhLEdBQUc7WUFDbEIsR0FBRyxzQkFBc0I7WUFDekIsR0FBRyxLQUFLO1NBQ1QsQ0FBQztRQUVGLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsZ0JBQWdCLENBQUM7UUFDdkQsSUFBSSxDQUFDLFlBQVksR0FBRyxhQUFhLENBQUMsWUFBWSxDQUFDO1FBQy9DLElBQUksQ0FBQyxZQUFZLEdBQUcsYUFBYSxDQUFDLFlBQVksQ0FBQztRQUMvQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsYUFBYSxDQUFDLG9CQUFvQixDQUFDO1FBQy9ELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsZ0JBQWdCLENBQUM7UUFDdkQsSUFBSSxDQUFDLGVBQWUsR0FBRyxhQUFhLENBQUMsZUFBZSxDQUFDO0lBQ3ZELENBQUM7SUFFRCx3REFBd0Q7SUFDeEQseUJBQXlCO0lBQ2xCLGtCQUFrQixDQUFDLEtBQW1CO1FBQzNDLE9BQU87WUFDTCxHQUFHLEtBQUs7WUFFUixvQ0FBb0M7WUFDcEMsK0RBQStEO1lBQy9ELHNFQUFzRTtZQUN0RSw4REFBOEQ7WUFDOUQsWUFBWSxFQUFFLElBQUksQ0FBQyxnQkFBZ0I7U0FDcEIsQ0FBQztJQUNwQixDQUFDO0lBRUQscURBQXFEO0lBQ3JELHNCQUFzQjtJQUNmLFVBQVUsQ0FBQyxPQUE0QztRQUM1RCxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUM7WUFDL0MsV0FBVyxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQzlCLFdBQVcsRUFBRSxJQUFJLENBQUMsWUFBWTtTQUMvQixDQUFDLENBQUM7UUFFSCxhQUFhLENBQUMscUJBQXFCLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsMkJBQTJCLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxFQUFFO1lBQ2xILHdCQUF3QixFQUFFLElBQUksQ0FBQyxvQkFBb0I7WUFDbkQsZUFBZSxFQUFFLElBQUksQ0FBQyxlQUFlO1lBQ3JDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7U0FDeEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBM0VELHNEQTJFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGVjcyBmcm9tICdAYXdzLWNkay9hd3MtZWNzJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IFNlcnZpY2VFeHRlbnNpb24sIFNlcnZpY2VCdWlsZCB9IGZyb20gJy4vZXh0ZW5zaW9uLWludGVyZmFjZXMnO1xuXG4vKipcbiAqIFRoZSBhdXRvc2NhbGluZyBzZXR0aW5ncy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDcHVTY2FsaW5nUHJvcHMge1xuICAvKipcbiAgICogSG93IG1hbnkgdGFza3MgdG8gbGF1bmNoIGluaXRpYWxseS5cbiAgICpcbiAgICogQGRlZmF1bHQgLSAyXG4gICAqL1xuICByZWFkb25seSBpbml0aWFsVGFza0NvdW50PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgbWluaW11bSBudW1iZXIgb2YgdGFza3Mgd2hlbiBzY2FsaW5nIGluLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIDJcbiAgICovXG4gIHJlYWRvbmx5IG1pblRhc2tDb3VudD86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHRhc2tzIHdoZW4gc2NhbGluZyBvdXQuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gOFxuICAgKi9cbiAgcmVhZG9ubHkgbWF4VGFza0NvdW50PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgQ1BVIHV0aWxpemF0aW9uIHRvIHRyeSBvdCBtYWludGFpbi5cbiAgICpcbiAgICogQGRlZmF1bHQgLSA1MCVcbiAgICovXG4gIHJlYWRvbmx5IHRhcmdldENwdVV0aWxpemF0aW9uPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBIb3cgbG9uZyB0byB3YWl0IGJldHdlZW4gc2NhbGUgb3V0IGFjdGlvbnMuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gNjAgc2Vjb25kc1xuICAgKi9cbiAgcmVhZG9ubHkgc2NhbGVPdXRDb29sZG93bj86IGNkay5EdXJhdGlvbjtcblxuICAvKipcbiAgICogSG93IGxvbmcgdG8gd2FpdCBiZXR3ZWVuIHNjYWxlIGluIGFjdGlvbnMuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gNjAgc2Vjb25kc1xuICAgKi9cbiAgcmVhZG9ubHkgc2NhbGVJbkNvb2xkb3duPzogY2RrLkR1cmF0aW9uO1xufVxuXG4vLyBUaGUgZGVmYXVsdCBhdXRvc2NhbGluZyBzZXR0aW5nc1xuY29uc3QgY3B1U2NhbGluZ1Byb3BzRGVmYXVsdCA9IHtcbiAgaW5pdGlhbFRhc2tDb3VudDogMixcbiAgbWluVGFza0NvdW50OiAyLFxuICBtYXhUYXNrQ291bnQ6IDgsXG4gIHRhcmdldENwdVV0aWxpemF0aW9uOiA1MCxcbiAgc2NhbGVPdXRDb29sZG93bjogY2RrLkR1cmF0aW9uLnNlY29uZHMoNjApLFxuICBzY2FsZUluQ29vbGRvd246IGNkay5EdXJhdGlvbi5zZWNvbmRzKDYwKSxcbn07XG5cbi8qKlxuICogVGhpcyBleHRlbnNpb24gaGVscHMgeW91IHNjYWxlIHlvdXIgc2VydmljZSBhY2NvcmRpbmcgdG8gQ1BVIHV0aWxpemF0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgU2NhbGVPbkNwdVV0aWxpemF0aW9uIGV4dGVuZHMgU2VydmljZUV4dGVuc2lvbiB7XG4gIC8qKlxuICAgKiBIb3cgbWFueSB0YXNrcyB0byBsYXVuY2ggaW5pdGlhbGx5LlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGluaXRpYWxUYXNrQ291bnQ6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG1pbmltdW0gbnVtYmVyIG9mIHRhc2tzIHdoZW4gc2NhbGluZyBpbi5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBtaW5UYXNrQ291bnQ6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHRhc2tzIHdoZW4gc2NhbGluZyBvdXQuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgbWF4VGFza0NvdW50OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBDUFUgdXRpbGl6YXRpb24gdG8gdHJ5IG90IG1haW50YWluLlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IHRhcmdldENwdVV0aWxpemF0aW9uOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEhvdyBsb25nIHRvIHdhaXQgYmV0d2VlbiBzY2FsZSBvdXQgYWN0aW9ucy5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBzY2FsZU91dENvb2xkb3duOiBjZGsuRHVyYXRpb247XG5cbiAgLyoqXG4gICAqIEhvdyBsb25nIHRvIHdhaXQgYmV0d2VlbiBzY2FsZSBpbiBhY3Rpb25zLlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IHNjYWxlSW5Db29sZG93bjogY2RrLkR1cmF0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzPzogQ3B1U2NhbGluZ1Byb3BzKSB7XG4gICAgc3VwZXIoJ3NjYWxlLW9uLWNwdS11dGlsaXphdGlvbicpO1xuXG4gICAgbGV0IGNvbWJpbmVkUHJvcHMgPSB7XG4gICAgICAuLi5jcHVTY2FsaW5nUHJvcHNEZWZhdWx0LFxuICAgICAgLi4ucHJvcHMsXG4gICAgfTtcblxuICAgIHRoaXMuaW5pdGlhbFRhc2tDb3VudCA9IGNvbWJpbmVkUHJvcHMuaW5pdGlhbFRhc2tDb3VudDtcbiAgICB0aGlzLm1pblRhc2tDb3VudCA9IGNvbWJpbmVkUHJvcHMubWluVGFza0NvdW50O1xuICAgIHRoaXMubWF4VGFza0NvdW50ID0gY29tYmluZWRQcm9wcy5tYXhUYXNrQ291bnQ7XG4gICAgdGhpcy50YXJnZXRDcHVVdGlsaXphdGlvbiA9IGNvbWJpbmVkUHJvcHMudGFyZ2V0Q3B1VXRpbGl6YXRpb247XG4gICAgdGhpcy5zY2FsZU91dENvb2xkb3duID0gY29tYmluZWRQcm9wcy5zY2FsZU91dENvb2xkb3duO1xuICAgIHRoaXMuc2NhbGVJbkNvb2xkb3duID0gY29tYmluZWRQcm9wcy5zY2FsZUluQ29vbGRvd247XG4gIH1cblxuICAvLyBUaGlzIHNlcnZpY2UgbW9kaWZpZXMgcHJvcGVydGllcyBvZiB0aGUgc2VydmljZSBwcmlvclxuICAvLyB0byBjb25zdHJ1Y3QgY3JlYXRpb24uXG4gIHB1YmxpYyBtb2RpZnlTZXJ2aWNlUHJvcHMocHJvcHM6IFNlcnZpY2VCdWlsZCk6IFNlcnZpY2VCdWlsZCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnByb3BzLFxuXG4gICAgICAvLyBMYXVuY2ggYW4gaW5pdGlhbCBudW1iZXIgb2YgdGFza3NcbiAgICAgIC8vIEluIHRoZSBmdXR1cmUgd2Ugc2hvdWxkIGNoYW5nZSB0aGlzIHRvIHVzZSBhIGN1c3RvbSByZXNvdXJjZVxuICAgICAgLy8gdG8gcmVhZCB0aGUgY3VycmVudCB0YXNrIGNvdW50IHNldCBieSBhdXRvc2NhbGluZywgc28gdGhhdCB0aGUgdGFza1xuICAgICAgLy8gY291bnQgZG9lc24ndCByb2xsYmFjayB0byB0aGUgaW5pdGlhbCBsZXZlbCBvbiBlYWNoIGRlcGxveS5cbiAgICAgIGRlc2lyZWRDb3VudDogdGhpcy5pbml0aWFsVGFza0NvdW50LFxuICAgIH0gYXMgU2VydmljZUJ1aWxkO1xuICB9XG5cbiAgLy8gVGhpcyBob29rIHV0aWxpemVzIHRoZSByZXN1bHRpbmcgc2VydmljZSBjb25zdHJ1Y3RcbiAgLy8gb25jZSBpdCBpcyBjcmVhdGVkLlxuICBwdWJsaWMgdXNlU2VydmljZShzZXJ2aWNlOiBlY3MuRWMyU2VydmljZSB8IGVjcy5GYXJnYXRlU2VydmljZSkge1xuICAgIGNvbnN0IHNjYWxpbmdUYXJnZXQgPSBzZXJ2aWNlLmF1dG9TY2FsZVRhc2tDb3VudCh7XG4gICAgICBtaW5DYXBhY2l0eTogdGhpcy5taW5UYXNrQ291bnQsXG4gICAgICBtYXhDYXBhY2l0eTogdGhpcy5tYXhUYXNrQ291bnQsXG4gICAgfSk7XG5cbiAgICBzY2FsaW5nVGFyZ2V0LnNjYWxlT25DcHVVdGlsaXphdGlvbihgJHt0aGlzLnBhcmVudFNlcnZpY2UuaWR9LXRhcmdldC1jcHUtdXRpbGl6YXRpb24tJHt0aGlzLnRhcmdldENwdVV0aWxpemF0aW9ufWAsIHtcbiAgICAgIHRhcmdldFV0aWxpemF0aW9uUGVyY2VudDogdGhpcy50YXJnZXRDcHVVdGlsaXphdGlvbixcbiAgICAgIHNjYWxlSW5Db29sZG93bjogdGhpcy5zY2FsZUluQ29vbGRvd24sXG4gICAgICBzY2FsZU91dENvb2xkb3duOiB0aGlzLnNjYWxlT3V0Q29vbGRvd24sXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==