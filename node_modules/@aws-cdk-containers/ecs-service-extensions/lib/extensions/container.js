"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Container = void 0;
const ecs = require("@aws-cdk/aws-ecs");
const extension_interfaces_1 = require("./extension-interfaces");
/**
 * The main container of a service. This is generally the container
 * which runs your application business logic. Other extensions will attach
 * sidecars alongside this main container.
 */
class Container extends extension_interfaces_1.ServiceExtension {
    constructor(props) {
        super('service-container');
        this.props = props;
        this.trafficPort = props.trafficPort;
    }
    // @ts-ignore - Ignore unused params that are required for abstract class extend
    prehook(service, scope) {
        this.parentService = service;
    }
    // This hook sets the overall task resource requirements to the
    // resource requirements of the application itself.
    modifyTaskDefinitionProps(props) {
        return {
            ...props,
            cpu: this.props.cpu.toString(),
            memoryMiB: this.props.memoryMiB.toString(),
        };
    }
    // This hook adds the application container to the task definition.
    useTaskDefinition(taskDefinition) {
        let containerProps = {
            image: this.props.image,
            cpu: Number(this.props.cpu),
            memoryLimitMiB: Number(this.props.memoryMiB),
            environment: this.props.environment,
        };
        // Let other extensions mutate the container definition. This is
        // used by extensions which want to add environment variables, modify
        // logging parameters, etc.
        this.containerMutatingHooks.forEach((hookProvider) => {
            containerProps = hookProvider.mutateContainerDefinition(containerProps);
        });
        this.container = taskDefinition.addContainer('app', containerProps);
        // Create a port mapping for the container
        this.container.addPortMappings({
            containerPort: this.trafficPort,
        });
        // Raise the ulimits for this main application container
        // so that it can handle more concurrent requests
        this.container.addUlimits({
            softLimit: 1024000,
            hardLimit: 1024000,
            name: ecs.UlimitName.NOFILE,
        });
    }
    resolveContainerDependencies() {
        if (!this.container) {
            throw new Error('The container dependency hook was called before the container was created');
        }
        const firelens = this.parentService.serviceDescription.get('firelens');
        if (firelens && firelens.container) {
            this.container.addContainerDependencies({
                container: firelens.container,
                condition: ecs.ContainerDependencyCondition.START,
            });
        }
        const appmeshextension = this.parentService.serviceDescription.get('appmesh');
        if (appmeshextension && appmeshextension.container) {
            this.container.addContainerDependencies({
                container: appmeshextension.container,
                condition: ecs.ContainerDependencyCondition.HEALTHY,
            });
        }
        const cloudwatchextension = this.parentService.serviceDescription.get('cloudwatchAgent');
        if (cloudwatchextension && cloudwatchextension.container) {
            this.container.addContainerDependencies({
                container: cloudwatchextension.container,
                condition: ecs.ContainerDependencyCondition.START,
            });
        }
        const xrayextension = this.parentService.serviceDescription.get('xray');
        if (xrayextension && xrayextension.container) {
            this.container.addContainerDependencies({
                container: xrayextension.container,
                condition: ecs.ContainerDependencyCondition.HEALTHY,
            });
        }
    }
}
exports.Container = Container;
//# sourceMappingURL=data:application/json;base64,