"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerMutatingHook = exports.ServiceExtension = exports.EnvironmentCapacityType = void 0;
/**
 * The types of capacity that are supported. These capacity types may change the
 * behavior of an extension.
 */
var EnvironmentCapacityType;
(function (EnvironmentCapacityType) {
    /**
     * Specify that the environment should use AWS Fargate for
     * hosting containers.
     */
    EnvironmentCapacityType["FARGATE"] = "fargate";
    /**
     * Specify that the environment should launch containers onto
     * EC2 instances.
     */
    EnvironmentCapacityType["EC2"] = "ec2";
})(EnvironmentCapacityType = exports.EnvironmentCapacityType || (exports.EnvironmentCapacityType = {}));
/**
 * The shape of a service extension. This abstract class is implemented
 * by other extensions that extend the hooks to implement any custom
 * logic that they want to run during each step of preparing the service.
 */
class ServiceExtension {
    constructor(name) {
        // A list of other extensions which want to mutate the
        // container definition for this extension.
        this.containerMutatingHooks = [];
        this.name = name;
    }
    /**
     * A hook that allows the extension to add hooks to other
     * extensions that are registered.
     */
    addHooks() { } // tslint:disable-line
    /**
     * This hook allows another service extension to register a mutating hook for
     * changing the primary container of this extension. This is primarily used
     * for the application extension. For example, the Firelens extension wants to
     * be able to modify the settings of the application container to
     * route logs through Firelens.
     *
     * @param hook
     */
    addContainerMutatingHook(hook) {
        this.containerMutatingHooks.push(hook);
    }
    /**
     * This is a hook which allows extensions to modify the settings of the
     * task definition prior to it being created. For example, the App Mesh
     * extension needs to configure an Envoy proxy in the task definition,
     * or the Application extension wants to set the overall resource for
     * the task.
     *
     * @param props - Properties of the task definition to be created
     */
    modifyTaskDefinitionProps(props) {
        return {
            ...props,
        };
    }
    /**
     * A hook that is called for each extension ahead of time to
     * allow for any initial setup, such as creating resources in
     * advance.
     *
     * @param parent - The parent service which this extension has been added to
     * @param scope - The scope that this extension should create resources in
     */
    prehook(parent, scope) {
        this.parentService = parent;
        this.scope = scope;
    }
    /**
     * Once the task definition is created, this hook is called for each
     * extension to give it a chance to add containers to the task definition,
     * change the task definition's role to add permissions, etc.
     *
     * @param taskDefinition - The created task definition to add containers to
     */
    useTaskDefinition(taskDefinition) {
        taskDefinition = taskDefinition;
    }
    /**
     * Once all containers are added to the task definition, this hook is
     * called for each extension to give it a chance to resolve its dependency
     * graph so that its container starts in the right order based on the
     * other extensions that were enabled.
     */
    resolveContainerDependencies() {
        return;
    }
    /**
     * Prior to launching the task definition as a service, this hook
     * is called on each extension to give it a chance to mutate the properties
     * of the service to be created.
     *
     * @param props - The service properties to mutate.
     */
    modifyServiceProps(props) {
        return {
            ...props,
        };
    }
    /**
     * When this hook is implemented by extension, it allows the extension
     * to use the service which has been created. It is generally used to
     * create any final resources which might depend on the service itself.
     *
     * @param service - The generated service.
     */
    useService(service) {
        service = service;
    }
    /**
     * This hook allows the extension to establish a connection to
     * extensions from another service. Usually used for things like
     * allowing one service to talk to the load balancer or service mesh
     * proxy for another service.
     *
     * @param service - The other service to connect to.
     */
    connectToService(service) {
        service = service;
    }
}
exports.ServiceExtension = ServiceExtension;
/**
 * This is an abstract class wrapper for a mutating hook. It is
 * extended by any extension which wants to mutate other extension's containers.
 */
class ContainerMutatingHook {
    /**
     * This is a hook for modifying the container definition of any upstream
     * containers. This is primarily used for the main application container.
     * For example, the Firelens extension wants to be able to modify the logging
     * settings of the application container.
     *
     * @param props - The container definition to mutate.
     */
    mutateContainerDefinition(props) {
        return {
            ...props,
        };
    }
}
exports.ContainerMutatingHook = ContainerMutatingHook;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaW9uLWludGVyZmFjZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJleHRlbnNpb24taW50ZXJmYWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFRQTs7O0dBR0c7QUFDSCxJQUFZLHVCQVlYO0FBWkQsV0FBWSx1QkFBdUI7SUFDakM7OztPQUdHO0lBQ0gsOENBQW1CLENBQUE7SUFFbkI7OztPQUdHO0lBQ0gsc0NBQVcsQ0FBQTtBQUNiLENBQUMsRUFaVyx1QkFBdUIsR0FBdkIsK0JBQXVCLEtBQXZCLCtCQUF1QixRQVlsQztBQW1FRDs7OztHQUlHO0FBQ0gsTUFBc0IsZ0JBQWdCO0lBMkJwQyxZQUFZLElBQVk7UUFKeEIsc0RBQXNEO1FBQ3RELDJDQUEyQztRQUNqQywyQkFBc0IsR0FBNEIsRUFBRSxDQUFDO1FBRzdELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ25CLENBQUM7SUFFRDs7O09BR0c7SUFDSSxRQUFRLEtBQUssQ0FBQyxDQUFDLHNCQUFzQjtJQUU1Qzs7Ozs7Ozs7T0FRRztJQUNJLHdCQUF3QixDQUFDLElBQTJCO1FBQ3pELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0kseUJBQXlCLENBQUMsS0FBOEI7UUFDN0QsT0FBTztZQUNMLEdBQUcsS0FBSztTQUNrQixDQUFDO0lBQy9CLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksT0FBTyxDQUFDLE1BQWUsRUFBRSxLQUFnQjtRQUM5QyxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQztRQUM1QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksaUJBQWlCLENBQUMsY0FBa0M7UUFDekQsY0FBYyxHQUFHLGNBQWMsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSw0QkFBNEI7UUFDakMsT0FBTztJQUNULENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxrQkFBa0IsQ0FBQyxLQUFtQjtRQUMzQyxPQUFPO1lBQ0wsR0FBRyxLQUFLO1NBQ08sQ0FBQztJQUNwQixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksVUFBVSxDQUFDLE9BQTRDO1FBQzVELE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDcEIsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSSxnQkFBZ0IsQ0FBQyxPQUFnQjtRQUN0QyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3BCLENBQUM7Q0FDRjtBQXRJRCw0Q0FzSUM7QUFFRDs7O0dBR0c7QUFDSCxNQUFzQixxQkFBcUI7SUFDekM7Ozs7Ozs7T0FPRztJQUNJLHlCQUF5QixDQUFDLEtBQXFDO1FBQ3BFLE9BQU87WUFDTCxHQUFHLEtBQUs7U0FDeUIsQ0FBQztJQUN0QyxDQUFDO0NBQ0Y7QUFkRCxzREFjQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGVjcyBmcm9tICdAYXdzLWNkay9hd3MtZWNzJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlJztcblxuLy8ga2VlcCB0aGlzIGltcG9ydCBzZXBhcmF0ZSBmcm9tIG90aGVyIGltcG9ydHMgdG8gcmVkdWNlIGNoYW5jZSBmb3IgbWVyZ2UgY29uZmxpY3RzIHdpdGggdjItbWFpblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWR1cGxpY2F0ZS1pbXBvcnRzLCBpbXBvcnQvb3JkZXJcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuXG4vKipcbiAqIFRoZSB0eXBlcyBvZiBjYXBhY2l0eSB0aGF0IGFyZSBzdXBwb3J0ZWQuIFRoZXNlIGNhcGFjaXR5IHR5cGVzIG1heSBjaGFuZ2UgdGhlXG4gKiBiZWhhdmlvciBvZiBhbiBleHRlbnNpb24uXG4gKi9cbmV4cG9ydCBlbnVtIEVudmlyb25tZW50Q2FwYWNpdHlUeXBlIHtcbiAgLyoqXG4gICAqIFNwZWNpZnkgdGhhdCB0aGUgZW52aXJvbm1lbnQgc2hvdWxkIHVzZSBBV1MgRmFyZ2F0ZSBmb3JcbiAgICogaG9zdGluZyBjb250YWluZXJzLlxuICAgKi9cbiAgRkFSR0FURSA9ICdmYXJnYXRlJyxcblxuICAvKipcbiAgICogU3BlY2lmeSB0aGF0IHRoZSBlbnZpcm9ubWVudCBzaG91bGQgbGF1bmNoIGNvbnRhaW5lcnMgb250b1xuICAgKiBFQzIgaW5zdGFuY2VzLlxuICAgKi9cbiAgRUMyID0gJ2VjMidcbn1cblxuLyoqXG4gKiBBIHNldCBvZiBtdXRhYmxlIHNlcnZpY2UgcHJvcHMgaW4gdGhlIHByb2Nlc3Mgb2YgYmVpbmcgYXNzZW1ibGVkIHVzaW5nIGFcbiAqIGJ1aWxkZXIgcGF0dGVybi4gVGhleSB3aWxsIGV2ZW50dWFsbHkgdG8gYmUgdHJhbnNsYXRlZCBpbnRvIGFuXG4gKiBlY3MuRWMyU2VydmljZVByb3BzIG9yIGVjcy5GYXJnYXRlU2VydmljZVByb3BzIGludGVyZmFjZSwgZGVwZW5kaW5nIG9uIHRoZVxuICogZW52aXJvbm1lbnQncyBjYXBhY2l0eSB0eXBlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlcnZpY2VCdWlsZCB7XG4gIC8qKlxuICAgKiBUaGUgY2x1c3RlciBpbiB3aGljaCB0byBsYXVuY2ggdGhlIHNlcnZpY2UuXG4gICAqL1xuICByZWFkb25seSBjbHVzdGVyOiBlY3MuSUNsdXN0ZXIsXG5cbiAgLyoqXG4gICAqIFRoZSB0YXNrIGRlZmluaXRpb24gcmVnaXN0ZXJlZCB0byB0aGlzIHNlcnZpY2UuXG4gICAqL1xuICByZWFkb25seSB0YXNrRGVmaW5pdGlvbjogZWNzLlRhc2tEZWZpbml0aW9uLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgd2hldGhlciB0aGUgdGFzaydzIGVsYXN0aWMgbmV0d29yayBpbnRlcmZhY2UgcmVjZWl2ZXMgYSBwdWJsaWMgSVBcbiAgICogYWRkcmVzcy5cbiAgICpcbiAgICogSWYgdHJ1ZSwgZWFjaCB0YXNrIHdpbGwgcmVjZWl2ZSBhIHB1YmxpYyBJUCBhZGRyZXNzLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGZhbHNlXG4gICAqL1xuICByZWFkb25seSBhc3NpZ25QdWJsaWNJcD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gZm9yIGhvdyB0byByZWdpc3RlciB0aGUgc2VydmljZSBpbiBzZXJ2aWNlIGRpc2NvdmVyeS5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBObyBDbG91ZCBNYXAgY29uZmlndXJlZFxuICAgKi9cbiAgcmVhZG9ubHkgY2xvdWRNYXBPcHRpb25zPzogZWNzLkNsb3VkTWFwT3B0aW9uc1xuXG4gIC8qKlxuICAgKiBIb3cgbG9uZyB0aGUgaGVhbHRoY2hlY2sgY2FuIGZhaWwgZHVyaW5nIGluaXRpYWwgdGFzayBzdGFydHVwIGJlZm9yZVxuICAgKiB0aGUgdGFzayBpcyBjb25zaWRlcmVkIHVuaGVhbHRoeS4gVGhpcyBpcyB1c2VkIHRvIGdpdmUgdGhlIHRhc2sgbW9yZVxuICAgKiB0aW1lIHRvIHN0YXJ0IHBhc3NpbmcgaGVhbHRoY2hlY2tzLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIE5vIGdyYWNlIHBlcmlvZFxuICAgKi9cbiAgcmVhZG9ubHkgaGVhbHRoQ2hlY2tHcmFjZVBlcmlvZD86IGNkay5EdXJhdGlvbixcblxuICAvKipcbiAgICogSG93IG1hbnkgdGFza3MgdG8gcnVuLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIDFcbiAgICovXG4gIHJlYWRvbmx5IGRlc2lyZWRDb3VudD86IG51bWJlcjtcblxuICAvKipcbiAgICogTWluaW11bSBoZWFsdGh5IHRhc2sgcGVyY2VudGFnZS5cbiAgICpcbiAgICogQGRlZmF1bHQgLSAxMDBcbiAgICovXG4gIHJlYWRvbmx5IG1pbkhlYWx0aHlQZXJjZW50PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBNYXhpbXVtIHBlcmNlbnRhZ2Ugb2YgdGFza3MgdGhhdCBjYW4gYmUgbGF1bmNoZWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gMjAwXG4gICAqL1xuICByZWFkb25seSBtYXhIZWFsdGh5UGVyY2VudD86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBUaGUgc2hhcGUgb2YgYSBzZXJ2aWNlIGV4dGVuc2lvbi4gVGhpcyBhYnN0cmFjdCBjbGFzcyBpcyBpbXBsZW1lbnRlZFxuICogYnkgb3RoZXIgZXh0ZW5zaW9ucyB0aGF0IGV4dGVuZCB0aGUgaG9va3MgdG8gaW1wbGVtZW50IGFueSBjdXN0b21cbiAqIGxvZ2ljIHRoYXQgdGhleSB3YW50IHRvIHJ1biBkdXJpbmcgZWFjaCBzdGVwIG9mIHByZXBhcmluZyB0aGUgc2VydmljZS5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFNlcnZpY2VFeHRlbnNpb24ge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGV4dGVuc2lvbi5cbiAgICovXG4gIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBjb250YWluZXIgZm9yIHRoaXMgZXh0ZW5zaW9uLiBNb3N0IGV4dGVuc2lvbnMgaGF2ZSBhIGNvbnRhaW5lciwgYnV0IG5vdFxuICAgKiBldmVyeSBleHRlbnNpb24gaXMgcmVxdWlyZWQgdG8gaGF2ZSBhIGNvbnRhaW5lci4gU29tZSBleHRlbnNpb25zIG1heSBqdXN0XG4gICAqIG1vZGlmeSB0aGUgcHJvcGVydGllcyBvZiB0aGUgc2VydmljZSwgb3IgY3JlYXRlIGV4dGVybmFsIHJlc291cmNlc1xuICAgKiBjb25uZWN0ZWQgdG8gdGhlIHNlcnZpY2UuXG4gICAqL1xuICBwdWJsaWMgY29udGFpbmVyPzogZWNzLkNvbnRhaW5lckRlZmluaXRpb247XG5cbiAgLyoqXG4gICAqIFRoZSBzZXJ2aWNlIHdoaWNoIHRoaXMgZXh0ZW5zaW9uIGlzIGJlaW5nIGFkZGVkIHRvLlxuICAgKiBJbml0aWFsbHksIGV4dGVuc2lvbnMgYXJlIGNvbGxlY3RlZCBpbnRvIGEgU2VydmljZURlc2NyaXB0aW9uLCBidXQgbm8gc2VydmljZVxuICAgKiBleGlzdHMgeWV0LiBMYXRlciwgd2hlbiB0aGUgU2VydmljZURlc2NyaXB0aW9uIGlzIHVzZWQgdG8gY3JlYXRlIGEgc2VydmljZSxcbiAgICogdGhlIGV4dGVuc2lvbiBpcyB0b2xkIHdoYXQgU2VydmljZSBpdCBpcyBub3cgd29ya2luZyBvbi5cbiAgICovXG4gIHByb3RlY3RlZCBwYXJlbnRTZXJ2aWNlITogU2VydmljZTtcbiAgcHJvdGVjdGVkIHNjb3BlITogY2RrLkNvbnN0cnVjdDtcblxuICAvLyBBIGxpc3Qgb2Ygb3RoZXIgZXh0ZW5zaW9ucyB3aGljaCB3YW50IHRvIG11dGF0ZSB0aGVcbiAgLy8gY29udGFpbmVyIGRlZmluaXRpb24gZm9yIHRoaXMgZXh0ZW5zaW9uLlxuICBwcm90ZWN0ZWQgY29udGFpbmVyTXV0YXRpbmdIb29rczogQ29udGFpbmVyTXV0YXRpbmdIb29rW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgaG9vayB0aGF0IGFsbG93cyB0aGUgZXh0ZW5zaW9uIHRvIGFkZCBob29rcyB0byBvdGhlclxuICAgKiBleHRlbnNpb25zIHRoYXQgYXJlIHJlZ2lzdGVyZWQuXG4gICAqL1xuICBwdWJsaWMgYWRkSG9va3MoKSB7IH0gLy8gdHNsaW50OmRpc2FibGUtbGluZVxuXG4gIC8qKlxuICAgKiBUaGlzIGhvb2sgYWxsb3dzIGFub3RoZXIgc2VydmljZSBleHRlbnNpb24gdG8gcmVnaXN0ZXIgYSBtdXRhdGluZyBob29rIGZvclxuICAgKiBjaGFuZ2luZyB0aGUgcHJpbWFyeSBjb250YWluZXIgb2YgdGhpcyBleHRlbnNpb24uIFRoaXMgaXMgcHJpbWFyaWx5IHVzZWRcbiAgICogZm9yIHRoZSBhcHBsaWNhdGlvbiBleHRlbnNpb24uIEZvciBleGFtcGxlLCB0aGUgRmlyZWxlbnMgZXh0ZW5zaW9uIHdhbnRzIHRvXG4gICAqIGJlIGFibGUgdG8gbW9kaWZ5IHRoZSBzZXR0aW5ncyBvZiB0aGUgYXBwbGljYXRpb24gY29udGFpbmVyIHRvXG4gICAqIHJvdXRlIGxvZ3MgdGhyb3VnaCBGaXJlbGVucy5cbiAgICpcbiAgICogQHBhcmFtIGhvb2tcbiAgICovXG4gIHB1YmxpYyBhZGRDb250YWluZXJNdXRhdGluZ0hvb2soaG9vazogQ29udGFpbmVyTXV0YXRpbmdIb29rKSB7XG4gICAgdGhpcy5jb250YWluZXJNdXRhdGluZ0hvb2tzLnB1c2goaG9vayk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpcyBhIGhvb2sgd2hpY2ggYWxsb3dzIGV4dGVuc2lvbnMgdG8gbW9kaWZ5IHRoZSBzZXR0aW5ncyBvZiB0aGVcbiAgICogdGFzayBkZWZpbml0aW9uIHByaW9yIHRvIGl0IGJlaW5nIGNyZWF0ZWQuIEZvciBleGFtcGxlLCB0aGUgQXBwIE1lc2hcbiAgICogZXh0ZW5zaW9uIG5lZWRzIHRvIGNvbmZpZ3VyZSBhbiBFbnZveSBwcm94eSBpbiB0aGUgdGFzayBkZWZpbml0aW9uLFxuICAgKiBvciB0aGUgQXBwbGljYXRpb24gZXh0ZW5zaW9uIHdhbnRzIHRvIHNldCB0aGUgb3ZlcmFsbCByZXNvdXJjZSBmb3JcbiAgICogdGhlIHRhc2suXG4gICAqXG4gICAqIEBwYXJhbSBwcm9wcyAtIFByb3BlcnRpZXMgb2YgdGhlIHRhc2sgZGVmaW5pdGlvbiB0byBiZSBjcmVhdGVkXG4gICAqL1xuICBwdWJsaWMgbW9kaWZ5VGFza0RlZmluaXRpb25Qcm9wcyhwcm9wczogZWNzLlRhc2tEZWZpbml0aW9uUHJvcHMpOiBlY3MuVGFza0RlZmluaXRpb25Qcm9wcyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnByb3BzLFxuICAgIH0gYXMgZWNzLlRhc2tEZWZpbml0aW9uUHJvcHM7XG4gIH1cblxuICAvKipcbiAgICogQSBob29rIHRoYXQgaXMgY2FsbGVkIGZvciBlYWNoIGV4dGVuc2lvbiBhaGVhZCBvZiB0aW1lIHRvXG4gICAqIGFsbG93IGZvciBhbnkgaW5pdGlhbCBzZXR1cCwgc3VjaCBhcyBjcmVhdGluZyByZXNvdXJjZXMgaW5cbiAgICogYWR2YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHBhcmVudCAtIFRoZSBwYXJlbnQgc2VydmljZSB3aGljaCB0aGlzIGV4dGVuc2lvbiBoYXMgYmVlbiBhZGRlZCB0b1xuICAgKiBAcGFyYW0gc2NvcGUgLSBUaGUgc2NvcGUgdGhhdCB0aGlzIGV4dGVuc2lvbiBzaG91bGQgY3JlYXRlIHJlc291cmNlcyBpblxuICAgKi9cbiAgcHVibGljIHByZWhvb2socGFyZW50OiBTZXJ2aWNlLCBzY29wZTogQ29uc3RydWN0KSB7XG4gICAgdGhpcy5wYXJlbnRTZXJ2aWNlID0gcGFyZW50O1xuICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPbmNlIHRoZSB0YXNrIGRlZmluaXRpb24gaXMgY3JlYXRlZCwgdGhpcyBob29rIGlzIGNhbGxlZCBmb3IgZWFjaFxuICAgKiBleHRlbnNpb24gdG8gZ2l2ZSBpdCBhIGNoYW5jZSB0byBhZGQgY29udGFpbmVycyB0byB0aGUgdGFzayBkZWZpbml0aW9uLFxuICAgKiBjaGFuZ2UgdGhlIHRhc2sgZGVmaW5pdGlvbidzIHJvbGUgdG8gYWRkIHBlcm1pc3Npb25zLCBldGMuXG4gICAqXG4gICAqIEBwYXJhbSB0YXNrRGVmaW5pdGlvbiAtIFRoZSBjcmVhdGVkIHRhc2sgZGVmaW5pdGlvbiB0byBhZGQgY29udGFpbmVycyB0b1xuICAgKi9cbiAgcHVibGljIHVzZVRhc2tEZWZpbml0aW9uKHRhc2tEZWZpbml0aW9uOiBlY3MuVGFza0RlZmluaXRpb24pIHtcbiAgICB0YXNrRGVmaW5pdGlvbiA9IHRhc2tEZWZpbml0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIE9uY2UgYWxsIGNvbnRhaW5lcnMgYXJlIGFkZGVkIHRvIHRoZSB0YXNrIGRlZmluaXRpb24sIHRoaXMgaG9vayBpc1xuICAgKiBjYWxsZWQgZm9yIGVhY2ggZXh0ZW5zaW9uIHRvIGdpdmUgaXQgYSBjaGFuY2UgdG8gcmVzb2x2ZSBpdHMgZGVwZW5kZW5jeVxuICAgKiBncmFwaCBzbyB0aGF0IGl0cyBjb250YWluZXIgc3RhcnRzIGluIHRoZSByaWdodCBvcmRlciBiYXNlZCBvbiB0aGVcbiAgICogb3RoZXIgZXh0ZW5zaW9ucyB0aGF0IHdlcmUgZW5hYmxlZC5cbiAgICovXG4gIHB1YmxpYyByZXNvbHZlQ29udGFpbmVyRGVwZW5kZW5jaWVzKCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcmlvciB0byBsYXVuY2hpbmcgdGhlIHRhc2sgZGVmaW5pdGlvbiBhcyBhIHNlcnZpY2UsIHRoaXMgaG9va1xuICAgKiBpcyBjYWxsZWQgb24gZWFjaCBleHRlbnNpb24gdG8gZ2l2ZSBpdCBhIGNoYW5jZSB0byBtdXRhdGUgdGhlIHByb3BlcnRpZXNcbiAgICogb2YgdGhlIHNlcnZpY2UgdG8gYmUgY3JlYXRlZC5cbiAgICpcbiAgICogQHBhcmFtIHByb3BzIC0gVGhlIHNlcnZpY2UgcHJvcGVydGllcyB0byBtdXRhdGUuXG4gICAqL1xuICBwdWJsaWMgbW9kaWZ5U2VydmljZVByb3BzKHByb3BzOiBTZXJ2aWNlQnVpbGQpOiBTZXJ2aWNlQnVpbGQge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5wcm9wcyxcbiAgICB9IGFzIFNlcnZpY2VCdWlsZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIHRoaXMgaG9vayBpcyBpbXBsZW1lbnRlZCBieSBleHRlbnNpb24sIGl0IGFsbG93cyB0aGUgZXh0ZW5zaW9uXG4gICAqIHRvIHVzZSB0aGUgc2VydmljZSB3aGljaCBoYXMgYmVlbiBjcmVhdGVkLiBJdCBpcyBnZW5lcmFsbHkgdXNlZCB0b1xuICAgKiBjcmVhdGUgYW55IGZpbmFsIHJlc291cmNlcyB3aGljaCBtaWdodCBkZXBlbmQgb24gdGhlIHNlcnZpY2UgaXRzZWxmLlxuICAgKlxuICAgKiBAcGFyYW0gc2VydmljZSAtIFRoZSBnZW5lcmF0ZWQgc2VydmljZS5cbiAgICovXG4gIHB1YmxpYyB1c2VTZXJ2aWNlKHNlcnZpY2U6IGVjcy5FYzJTZXJ2aWNlIHwgZWNzLkZhcmdhdGVTZXJ2aWNlKSB7XG4gICAgc2VydmljZSA9IHNlcnZpY2U7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBob29rIGFsbG93cyB0aGUgZXh0ZW5zaW9uIHRvIGVzdGFibGlzaCBhIGNvbm5lY3Rpb24gdG9cbiAgICogZXh0ZW5zaW9ucyBmcm9tIGFub3RoZXIgc2VydmljZS4gVXN1YWxseSB1c2VkIGZvciB0aGluZ3MgbGlrZVxuICAgKiBhbGxvd2luZyBvbmUgc2VydmljZSB0byB0YWxrIHRvIHRoZSBsb2FkIGJhbGFuY2VyIG9yIHNlcnZpY2UgbWVzaFxuICAgKiBwcm94eSBmb3IgYW5vdGhlciBzZXJ2aWNlLlxuICAgKlxuICAgKiBAcGFyYW0gc2VydmljZSAtIFRoZSBvdGhlciBzZXJ2aWNlIHRvIGNvbm5lY3QgdG8uXG4gICAqL1xuICBwdWJsaWMgY29ubmVjdFRvU2VydmljZShzZXJ2aWNlOiBTZXJ2aWNlKSB7XG4gICAgc2VydmljZSA9IHNlcnZpY2U7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIGlzIGFuIGFic3RyYWN0IGNsYXNzIHdyYXBwZXIgZm9yIGEgbXV0YXRpbmcgaG9vay4gSXQgaXNcbiAqIGV4dGVuZGVkIGJ5IGFueSBleHRlbnNpb24gd2hpY2ggd2FudHMgdG8gbXV0YXRlIG90aGVyIGV4dGVuc2lvbidzIGNvbnRhaW5lcnMuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb250YWluZXJNdXRhdGluZ0hvb2sge1xuICAvKipcbiAgICogVGhpcyBpcyBhIGhvb2sgZm9yIG1vZGlmeWluZyB0aGUgY29udGFpbmVyIGRlZmluaXRpb24gb2YgYW55IHVwc3RyZWFtXG4gICAqIGNvbnRhaW5lcnMuIFRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgZm9yIHRoZSBtYWluIGFwcGxpY2F0aW9uIGNvbnRhaW5lci5cbiAgICogRm9yIGV4YW1wbGUsIHRoZSBGaXJlbGVucyBleHRlbnNpb24gd2FudHMgdG8gYmUgYWJsZSB0byBtb2RpZnkgdGhlIGxvZ2dpbmdcbiAgICogc2V0dGluZ3Mgb2YgdGhlIGFwcGxpY2F0aW9uIGNvbnRhaW5lci5cbiAgICpcbiAgICogQHBhcmFtIHByb3BzIC0gVGhlIGNvbnRhaW5lciBkZWZpbml0aW9uIHRvIG11dGF0ZS5cbiAgICovXG4gIHB1YmxpYyBtdXRhdGVDb250YWluZXJEZWZpbml0aW9uKHByb3BzOiBlY3MuQ29udGFpbmVyRGVmaW5pdGlvbk9wdGlvbnMpOiBlY3MuQ29udGFpbmVyRGVmaW5pdGlvbk9wdGlvbnMge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5wcm9wcyxcbiAgICB9IGFzIGVjcy5Db250YWluZXJEZWZpbml0aW9uT3B0aW9ucztcbiAgfVxufVxuIl19