"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FireLensExtension = exports.FirelensMutatingHook = void 0;
const ecs = require("@aws-cdk/aws-ecs");
const awslogs = require("@aws-cdk/aws-logs");
const cdk = require("@aws-cdk/core");
const extension_interfaces_1 = require("./extension-interfaces");
/**
 * This hook modifies the application container's settings so that
 * it routes logs using FireLens.
 */
class FirelensMutatingHook extends extension_interfaces_1.ContainerMutatingHook {
    constructor(props) {
        super();
        this.parentService = props.parentService;
        this.logGroup = props.logGroup;
    }
    mutateContainerDefinition(props) {
        return {
            ...props,
            logging: ecs.LogDrivers.firelens({
                options: {
                    Name: 'cloudwatch',
                    region: cdk.Stack.of(this.parentService).region,
                    log_group_name: this.logGroup.logGroupName,
                    log_stream_prefix: `${this.parentService.id}/`,
                },
            }),
        };
    }
}
exports.FirelensMutatingHook = FirelensMutatingHook;
/**
 * This extension adds a FluentBit log router to the task definition
 * and does all the configuration necessarily to enable log routing
 * for the task using FireLens.
 */
class FireLensExtension extends extension_interfaces_1.ServiceExtension {
    constructor() {
        super('firelens');
    }
    prehook(service, scope) {
        this.parentService = service;
        // Create a log group for the service, into which FireLens
        // will route the service's logs
        this.logGroup = new awslogs.LogGroup(scope, `${service.id}-logs`, {
            logGroupName: `${service.id}-logs`,
            removalPolicy: cdk.RemovalPolicy.DESTROY,
            retention: awslogs.RetentionDays.ONE_WEEK,
        });
    }
    // Add hooks to the main application extension so that it is modified to
    // have logging properties that enable sending logs via the
    // Firelens log router container
    addHooks() {
        const container = this.parentService.serviceDescription.get('service-container');
        if (!container) {
            throw new Error('Firelens extension requires an application extension');
        }
        container.addContainerMutatingHook(new FirelensMutatingHook({
            parentService: this.parentService,
            logGroup: this.logGroup,
        }));
    }
    useTaskDefinition(taskDefinition) {
        // Manually add a firelens log router, so that we can manually manage the dependencies
        // to ensure that the Firelens log router depends on the Envoy proxy
        this.container = taskDefinition.addFirelensLogRouter('firelens', {
            image: ecs.obtainDefaultFluentBitECRImage(taskDefinition, {
                logDriver: 'awsfirelens',
                options: {
                    Name: 'cloudwatch',
                },
            }),
            firelensConfig: {
                type: ecs.FirelensLogRouterType.FLUENTBIT,
            },
            logging: new ecs.AwsLogDriver({ streamPrefix: 'firelens' }),
            memoryReservationMiB: 50,
            user: '0:1338',
        });
    }
    resolveContainerDependencies() {
        if (!this.container) {
            throw new Error('The container dependency hook was called before the container was created');
        }
        const appmeshextension = this.parentService.serviceDescription.get('appmesh');
        if (appmeshextension && appmeshextension.container) {
            this.container.addContainerDependencies({
                container: appmeshextension.container,
                condition: ecs.ContainerDependencyCondition.HEALTHY,
            });
        }
    }
}
exports.FireLensExtension = FireLensExtension;
//# sourceMappingURL=data:application/json;base64,