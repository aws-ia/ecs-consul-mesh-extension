"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportedEnvironment = exports.Environment = void 0;
const ec2 = require("@aws-cdk/aws-ec2");
const ecs = require("@aws-cdk/aws-ecs");
const extension_interfaces_1 = require("./extensions/extension-interfaces");
// keep this import separate from other imports to reduce chance for merge conflicts with v2-main
// eslint-disable-next-line no-duplicate-imports, import/order
const core_1 = require("@aws-cdk/core");
/**
 * An environment into which to deploy a service. This environment
 * can either be instantiated with a pre-existing AWS VPC and ECS cluster,
 * or it can create its own VPC and cluster. By default, it will create
 * a cluster with Fargate capacity.
 */
class Environment extends core_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.scope = scope;
        this.id = id;
        if (props && props.vpc) {
            this.vpc = props.vpc;
        }
        else {
            this.vpc = new ec2.Vpc(this.scope, `${this.id}-environment-vpc`);
        }
        if (props && props.cluster) {
            this.cluster = props.cluster;
        }
        else {
            this.cluster = new ecs.Cluster(this.scope, `${this.id}-environment-cluster`, { vpc: this.vpc });
        }
        if (props && props.capacityType) {
            this.capacityType = props.capacityType;
        }
        else {
            this.capacityType = extension_interfaces_1.EnvironmentCapacityType.FARGATE;
        }
    }
    /**
     * Import an existing environment from its attributes.
     */
    static fromEnvironmentAttributes(scope, id, attrs) {
        return new ImportedEnvironment(scope, id, attrs);
    }
    /**
     * Add a default cloudmap namespace to the environment's cluster.
     */
    addDefaultCloudMapNamespace(options) {
        this.cluster.addDefaultCloudMapNamespace(options);
    }
}
exports.Environment = Environment;
class ImportedEnvironment extends core_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.id = id;
        this.capacityType = props.capacityType;
        this.cluster = props.cluster;
        this.vpc = props.cluster.vpc;
    }
    /**
     * Adding a default cloudmap namespace to the cluster will throw an error, as we don't
     * own it.
     */
    addDefaultCloudMapNamespace(_options) {
        throw new Error('the cluster environment is immutable when imported');
    }
}
exports.ImportedEnvironment = ImportedEnvironment;
//# sourceMappingURL=data:application/json;base64,